/* Generated by Yosys 0.47+61 (git sha1 81011ad92, clang++ 18.1.8 -fPIC -O3) */

module add_sub_mod_32_24_8(fp_a, fp_b, add_sub, fp_z);
  wire rtil_signal_00_;
  wire rtil_signal_01_;
  wire rtil_signal_02_;
  wire rtil_signal_03_;
  wire rtil_signal_04_;
  wire rtil_signal_05_;
  wire rtil_signal_06_;
  wire rtil_signal_07_;
  wire rtil_signal_08_;
  wire rtil_signal_09_;
  wire rtil_signal_10_;
  wire rtil_signal_11_;
  wire rtil_signal_12_;
  wire rtil_signal_13_;
  wire rtil_signal_14_;
  wire [27:0] rtil_signal_15_;
  wire rtil_signal_16_;
  wire rtil_signal_17_;
  wire rtil_signal_18_;
  wire rtil_signal_19_;
  wire [27:0] rtil_signal_20_;
  wire rtil_signal_21_;
  wire rtil_signal_22_;
  wire rtil_signal_23_;
  wire rtil_signal_24_;
  wire rtil_signal_25_;
  wire rtil_signal_26_;
  wire rtil_signal_27_;
  wire rtil_signal_28_;
  wire rtil_signal_29_;
  wire rtil_signal_30_;
  wire rtil_signal_31_;
  wire rtil_signal_32_;
  wire [31:0] rtil_signal_33_;
  wire [31:0] rtil_signal_34_;
  wire [31:0] rtil_signal_35_;
  input add_sub;
  wire add_sub;
  wire [27:0] addab;
  wire [27:0] addsubab;
  wire didnorm1;
  wire [8:0] diffexp;
  wire [8:0] diffexpab;
  wire [8:0] diffexpba;
  wire [8:0] efectexp;
  wire [27:0] efectfraca;
  wire [27:0] efectfracb;
  wire [27:0] efectfracb_align;
  wire [7:0] exp_add_norm1;
  wire [7:0] exp_add_norm1_aux;
  wire [7:0] exp_norm1;
  wire [7:0] exp_sub_norm1;
  wire expa_ff;
  wire expa_z;
  wire expb_ff;
  wire expb_z;
  input [31:0] fp_a;
  wire [31:0] fp_a;
  input [31:0] fp_b;
  wire [31:0] fp_b;
  output [31:0] fp_z;
  wire [31:0] fp_z;
  wire [27:0] frac;
  wire [27:0] frac_add_norm1;
  wire [27:0] frac_norm1;
  wire [22:0] frac_norm2;
  wire [27:0] frac_sub_norm1;
  wire fraca_z;
  wire fracb_z;
  wire isinf;
  wire isnan;
  wire isnan_a;
  wire isnan_b;
  wire isroundup;
  wire issub;
  wire istwo;
  wire iszero_a;
  wire iszero_aorb;
  wire iszero_b;
  wire overflow;
  wire sign;
  wire sign_b;
  wire [27:0] subab;
  wire [27:0] subbaexpeq;
  wire \subtraction_norm:819 ;
  wire underflow;
  assign rtil_signal_00_ = fp_a[30:23] == 8'hff;
  assign expa_ff = rtil_signal_00_ ? 1'h1 : 1'h0;
  assign rtil_signal_01_ = fp_b[30:23] == 8'hff;
  assign expb_ff = rtil_signal_01_ ? 1'h1 : 1'h0;
  assign rtil_signal_02_ = ! fp_a[30:23];
  assign expa_z = rtil_signal_02_ ? 1'h1 : 1'h0;
  assign rtil_signal_03_ = ! fp_b[30:23];
  assign expb_z = rtil_signal_03_ ? 1'h1 : 1'h0;
  assign rtil_signal_04_ = ! fp_a[22:0];
  assign fraca_z = rtil_signal_04_ ? 1'h1 : 1'h0;
  assign rtil_signal_05_ = ! fp_b[22:0];
  assign fracb_z = rtil_signal_05_ ? 1'h1 : 1'h0;
  assign rtil_signal_06_ = ~ fraca_z;
  assign isnan_a = expa_ff & rtil_signal_06_;
  assign rtil_signal_07_ = ~ fracb_z;
  assign isnan_b = expb_ff & rtil_signal_07_;
  assign iszero_a = expa_z & fraca_z;
  assign iszero_b = expb_z & fracb_z;
  assign iszero_aorb = iszero_a | iszero_b;
  assign rtil_signal_08_ = isnan_a | isnan_b;
  assign rtil_signal_10_ = rtil_signal_09_ & issub;
  assign isnan = rtil_signal_08_ | rtil_signal_10_;
  assign rtil_signal_11_ = expa_ff ^ expb_ff;
  assign rtil_signal_09_ = expa_ff & expb_ff;
  assign rtil_signal_13_ = rtil_signal_09_ & rtil_signal_12_;
  assign isinf = rtil_signal_11_ | rtil_signal_13_;
  assign sign_b = add_sub ? fp_b[31] : rtil_signal_14_;
  assign rtil_signal_14_ = ~ fp_b[31];
  assign issub = fp_a[31] ^ sign_b;
  assign diffexpab = { 1'h0, fp_a[30:23] } - { 1'h0, fp_b[30:23] };
  assign diffexpba = { 1'h0, fp_b[30:23] } - { 1'h0, fp_a[30:23] };
  assign diffexp = diffexpab[8] ? diffexpba : { 1'h0, diffexpab[7:0] };
  assign efectfraca = diffexpab[8] ? { 2'h1, fp_b[22:0], 3'h0 } : { 2'h1, fp_a[22:0], 3'h0 };
  assign efectfracb = diffexpab[8] ? { 2'h1, fp_a[22:0], 3'h0 } : { 2'h1, fp_b[22:0], 3'h0 };
  assign efectexp = diffexpab[8] ? { 1'h0, fp_b[30:23] } : { 1'h0, fp_a[30:23] };
  assign addab = efectfraca + efectfracb_align;
  assign subab = efectfraca - efectfracb_align;
  assign addsubab = issub ? subab : addab;
  assign subbaexpeq[27:3] = { 2'h1, fp_b[22:0] } - { 2'h1, fp_a[22:0] };
  assign frac = iszero_a ? { 2'h1, fp_b[22:0], 3'h0 } : rtil_signal_15_;
  assign rtil_signal_15_ = iszero_b ? { 2'h1, fp_a[22:0], 3'h0 } : rtil_signal_20_;
  assign rtil_signal_16_ = ~ subbaexpeq[27];
  assign rtil_signal_17_ = fp_a[30:23] == fp_b[30:23];
  assign rtil_signal_18_ = rtil_signal_17_ & rtil_signal_16_;
  assign rtil_signal_19_ = issub & rtil_signal_18_;
  assign rtil_signal_20_ = rtil_signal_19_ ? { subbaexpeq[27:3], 3'h0 } : addsubab;
  assign rtil_signal_21_ = fp_a[31] == sign_b;
  assign sign = rtil_signal_21_ ? fp_a[31] : rtil_signal_22_;
  assign rtil_signal_22_ = diffexpab[8] ? sign_b : rtil_signal_23_;
  assign rtil_signal_23_ = addsubab[27] ? sign_b : fp_a[31];
  assign rtil_signal_24_ = frac[1] | frac[0];
  assign frac_add_norm1 = frac[27] ? { 2'h1, frac[26:2], rtil_signal_24_ } : { 1'h0, frac[26:0] };
  assign didnorm1 = frac[27] ? 1'h1 : 1'h0;
  assign rtil_signal_25_ = frac[26:2] == 25'h1ffffff;
  assign istwo = rtil_signal_25_ ? 1'h1 : 1'h0;
  assign exp_add_norm1_aux[0] = didnorm1 | istwo;
  assign exp_add_norm1 = efectexp[7:0] + { 7'h00, exp_add_norm1_aux[0] };
  assign frac_norm1 = issub ? frac_sub_norm1 : frac_add_norm1;
  assign exp_norm1 = issub ? exp_sub_norm1 : exp_add_norm1;
  assign rtil_signal_26_ = frac_norm1[1] | frac_norm1[0];
  assign rtil_signal_27_ = rtil_signal_26_ & frac_norm1[2];
  assign rtil_signal_28_ = frac_norm1[3:0] == 4'hc;
  assign rtil_signal_29_ = rtil_signal_27_ | rtil_signal_28_;
  assign isroundup = rtil_signal_29_ ? 1'h1 : 1'h0;
  assign frac_norm2 = frac_norm1[25:3] + { 22'h000000, isroundup };
  assign rtil_signal_30_ = exp_norm1 == 8'hff;
  assign rtil_signal_12_ = ~ issub;
  assign rtil_signal_31_ = rtil_signal_12_ & rtil_signal_30_;
  assign overflow = rtil_signal_31_ ? 1'h1 : 1'h0;
  assign underflow = issub ? \subtraction_norm:819  : 1'h0;
  assign fp_z = isnan ? { sign, 31'h7f800001 } : rtil_signal_33_;
  assign rtil_signal_32_ = isinf | overflow;
  assign rtil_signal_33_ = rtil_signal_32_ ? { sign, 31'h7f800000 } : rtil_signal_34_;
  assign rtil_signal_34_ = iszero_aorb ? { sign, efectexp[7:0], frac[25:3] } : rtil_signal_35_;
  assign rtil_signal_35_ = underflow ? { sign, 31'h00000000 } : { sign, exp_norm1, frac_norm2 };
  fp_leading_zeros_and_shift_27_8_4 subtraction_norm (
    .exp(efectexp[7:0]),
    .exp_norm(exp_sub_norm1),
    .frac(frac),
    .frac_norm(frac_sub_norm1),
    .underflow(\subtraction_norm:819 )
  );
  right_shifter_27_8_4 unioa (
    .diff_exp(diffexp),
    .frac(efectfracb),
    .frac_align(efectfracb_align)
  );
  assign exp_add_norm1_aux[7:1] = 7'h00;
  assign subbaexpeq[2:0] = 3'h0;
endmodule

module fp_leading_zeros_and_shift_27_8_4(frac, exp, frac_norm, exp_norm, underflow);
  wire rtil_signal_000_;
  wire [4:0] rtil_signal_001_;
  wire rtil_signal_002_;
  wire rtil_signal_003_;
  wire [4:0] rtil_signal_004_;
  wire rtil_signal_005_;
  wire rtil_signal_006_;
  wire rtil_signal_007_;
  wire rtil_signal_008_;
  wire [4:0] rtil_signal_009_;
  wire rtil_signal_010_;
  wire rtil_signal_011_;
  wire rtil_signal_012_;
  wire rtil_signal_013_;
  wire [4:0] rtil_signal_014_;
  wire rtil_signal_015_;
  wire rtil_signal_016_;
  wire rtil_signal_017_;
  wire rtil_signal_018_;
  wire [4:0] rtil_signal_019_;
  wire rtil_signal_020_;
  wire rtil_signal_021_;
  wire rtil_signal_022_;
  wire rtil_signal_023_;
  wire [4:0] rtil_signal_024_;
  wire rtil_signal_025_;
  wire rtil_signal_026_;
  wire rtil_signal_027_;
  wire rtil_signal_028_;
  wire [4:0] rtil_signal_029_;
  wire rtil_signal_030_;
  wire rtil_signal_031_;
  wire rtil_signal_032_;
  wire rtil_signal_033_;
  wire [4:0] rtil_signal_034_;
  wire rtil_signal_035_;
  wire rtil_signal_036_;
  wire rtil_signal_037_;
  wire rtil_signal_038_;
  wire [4:0] rtil_signal_039_;
  wire rtil_signal_040_;
  wire rtil_signal_041_;
  wire rtil_signal_042_;
  wire rtil_signal_043_;
  wire [4:0] rtil_signal_044_;
  wire rtil_signal_045_;
  wire rtil_signal_046_;
  wire rtil_signal_047_;
  wire rtil_signal_048_;
  wire [4:0] rtil_signal_049_;
  wire rtil_signal_050_;
  wire rtil_signal_051_;
  wire rtil_signal_052_;
  wire rtil_signal_053_;
  wire [4:0] rtil_signal_054_;
  wire rtil_signal_055_;
  wire rtil_signal_056_;
  wire rtil_signal_057_;
  wire rtil_signal_058_;
  wire [4:0] rtil_signal_059_;
  wire rtil_signal_060_;
  wire rtil_signal_061_;
  wire rtil_signal_062_;
  wire rtil_signal_063_;
  wire [4:0] rtil_signal_064_;
  wire rtil_signal_065_;
  wire rtil_signal_066_;
  wire rtil_signal_067_;
  wire rtil_signal_068_;
  wire [4:0] rtil_signal_069_;
  wire rtil_signal_070_;
  wire rtil_signal_071_;
  wire rtil_signal_072_;
  wire rtil_signal_073_;
  wire [4:0] rtil_signal_074_;
  wire rtil_signal_075_;
  wire rtil_signal_076_;
  wire rtil_signal_077_;
  wire rtil_signal_078_;
  wire [4:0] rtil_signal_079_;
  wire rtil_signal_080_;
  wire rtil_signal_081_;
  wire rtil_signal_082_;
  wire rtil_signal_083_;
  wire [4:0] rtil_signal_084_;
  wire rtil_signal_085_;
  wire rtil_signal_086_;
  wire rtil_signal_087_;
  wire rtil_signal_088_;
  wire [4:0] rtil_signal_089_;
  wire rtil_signal_090_;
  wire rtil_signal_091_;
  wire rtil_signal_092_;
  wire rtil_signal_093_;
  wire [4:0] rtil_signal_094_;
  wire rtil_signal_095_;
  wire rtil_signal_096_;
  wire rtil_signal_097_;
  wire rtil_signal_098_;
  wire [4:0] rtil_signal_099_;
  wire rtil_signal_100_;
  wire rtil_signal_101_;
  wire rtil_signal_102_;
  wire rtil_signal_103_;
  wire [4:0] rtil_signal_104_;
  wire rtil_signal_105_;
  wire rtil_signal_106_;
  wire rtil_signal_107_;
  wire rtil_signal_108_;
  wire [4:0] rtil_signal_109_;
  wire rtil_signal_110_;
  wire rtil_signal_111_;
  wire rtil_signal_112_;
  wire rtil_signal_113_;
  wire [4:0] rtil_signal_114_;
  wire rtil_signal_115_;
  wire rtil_signal_116_;
  wire rtil_signal_117_;
  wire rtil_signal_118_;
  wire [4:0] rtil_signal_119_;
  wire rtil_signal_120_;
  wire rtil_signal_121_;
  wire rtil_signal_122_;
  wire rtil_signal_123_;
  wire [4:0] rtil_signal_124_;
  wire rtil_signal_125_;
  wire rtil_signal_126_;
  wire rtil_signal_127_;
  wire rtil_signal_128_;
  wire rtil_signal_129_;
  wire rtil_signal_130_;
  wire [7:0] rtil_signal_131_;
  wire rtil_signal_132_;
  wire rtil_signal_133_;
  wire rtil_signal_134_;
  wire [27:0] rtil_signal_135_;
  wire [27:0] rtil_signal_136_;
  wire [27:0] rtil_signal_137_;
  wire [27:0] rtil_signal_138_;
  input [7:0] exp;
  wire [7:0] exp;
  output [7:0] exp_norm;
  wire [7:0] exp_norm;
  input [27:0] frac;
  wire [27:0] frac;
  output [27:0] frac_norm;
  wire [27:0] frac_norm;
  wire isz;
  wire [4:0] leadzerosbin;
  output underflow;
  wire underflow;
  assign rtil_signal_001_ = rtil_signal_000_ ? 5'h1b : 5'h00;
  assign rtil_signal_002_ = rtil_signal_000_ ? 1'h0 : 1'h1;
  assign rtil_signal_003_ = ! frac[26:1];
  assign rtil_signal_004_ = rtil_signal_007_ ? 5'h1a : rtil_signal_001_;
  assign rtil_signal_005_ = rtil_signal_007_ ? 1'h0 : rtil_signal_002_;
  assign rtil_signal_006_ = rtil_signal_002_ & rtil_signal_003_;
  assign rtil_signal_007_ = rtil_signal_006_ & rtil_signal_002_;
  assign rtil_signal_008_ = ! frac[26:2];
  assign rtil_signal_009_ = rtil_signal_012_ ? 5'h19 : rtil_signal_004_;
  assign rtil_signal_010_ = rtil_signal_012_ ? 1'h0 : rtil_signal_005_;
  assign rtil_signal_011_ = rtil_signal_005_ & rtil_signal_008_;
  assign rtil_signal_012_ = rtil_signal_011_ & rtil_signal_005_;
  assign rtil_signal_013_ = ! frac[26:3];
  assign rtil_signal_014_ = rtil_signal_017_ ? 5'h18 : rtil_signal_009_;
  assign rtil_signal_015_ = rtil_signal_017_ ? 1'h0 : rtil_signal_010_;
  assign rtil_signal_016_ = rtil_signal_010_ & rtil_signal_013_;
  assign rtil_signal_017_ = rtil_signal_016_ & rtil_signal_010_;
  assign rtil_signal_018_ = ! frac[26:4];
  assign rtil_signal_019_ = rtil_signal_022_ ? 5'h17 : rtil_signal_014_;
  assign rtil_signal_020_ = rtil_signal_022_ ? 1'h0 : rtil_signal_015_;
  assign rtil_signal_021_ = rtil_signal_015_ & rtil_signal_018_;
  assign rtil_signal_022_ = rtil_signal_021_ & rtil_signal_015_;
  assign rtil_signal_023_ = ! frac[26:5];
  assign rtil_signal_024_ = rtil_signal_027_ ? 5'h16 : rtil_signal_019_;
  assign rtil_signal_025_ = rtil_signal_027_ ? 1'h0 : rtil_signal_020_;
  assign rtil_signal_026_ = rtil_signal_020_ & rtil_signal_023_;
  assign rtil_signal_027_ = rtil_signal_026_ & rtil_signal_020_;
  assign rtil_signal_028_ = ! frac[26:6];
  assign rtil_signal_029_ = rtil_signal_032_ ? 5'h15 : rtil_signal_024_;
  assign rtil_signal_030_ = rtil_signal_032_ ? 1'h0 : rtil_signal_025_;
  assign rtil_signal_031_ = rtil_signal_025_ & rtil_signal_028_;
  assign rtil_signal_032_ = rtil_signal_031_ & rtil_signal_025_;
  assign rtil_signal_033_ = ! frac[26:7];
  assign rtil_signal_034_ = rtil_signal_037_ ? 5'h14 : rtil_signal_029_;
  assign rtil_signal_035_ = rtil_signal_037_ ? 1'h0 : rtil_signal_030_;
  assign rtil_signal_036_ = rtil_signal_030_ & rtil_signal_033_;
  assign rtil_signal_037_ = rtil_signal_036_ & rtil_signal_030_;
  assign rtil_signal_038_ = ! frac[26:8];
  assign rtil_signal_039_ = rtil_signal_042_ ? 5'h13 : rtil_signal_034_;
  assign rtil_signal_040_ = rtil_signal_042_ ? 1'h0 : rtil_signal_035_;
  assign rtil_signal_041_ = rtil_signal_035_ & rtil_signal_038_;
  assign rtil_signal_042_ = rtil_signal_041_ & rtil_signal_035_;
  assign rtil_signal_043_ = ! frac[26:9];
  assign rtil_signal_044_ = rtil_signal_047_ ? 5'h12 : rtil_signal_039_;
  assign rtil_signal_045_ = rtil_signal_047_ ? 1'h0 : rtil_signal_040_;
  assign rtil_signal_046_ = rtil_signal_040_ & rtil_signal_043_;
  assign rtil_signal_047_ = rtil_signal_046_ & rtil_signal_040_;
  assign rtil_signal_048_ = ! frac[26:10];
  assign rtil_signal_049_ = rtil_signal_052_ ? 5'h11 : rtil_signal_044_;
  assign rtil_signal_050_ = rtil_signal_052_ ? 1'h0 : rtil_signal_045_;
  assign rtil_signal_051_ = rtil_signal_045_ & rtil_signal_048_;
  assign rtil_signal_052_ = rtil_signal_051_ & rtil_signal_045_;
  assign rtil_signal_053_ = ! frac[26:11];
  assign rtil_signal_054_ = rtil_signal_057_ ? 5'h10 : rtil_signal_049_;
  assign rtil_signal_055_ = rtil_signal_057_ ? 1'h0 : rtil_signal_050_;
  assign rtil_signal_056_ = rtil_signal_050_ & rtil_signal_053_;
  assign rtil_signal_057_ = rtil_signal_056_ & rtil_signal_050_;
  assign rtil_signal_058_ = ! frac[26:12];
  assign rtil_signal_059_ = rtil_signal_062_ ? 5'h0f : rtil_signal_054_;
  assign rtil_signal_060_ = rtil_signal_062_ ? 1'h0 : rtil_signal_055_;
  assign rtil_signal_061_ = rtil_signal_055_ & rtil_signal_058_;
  assign rtil_signal_062_ = rtil_signal_061_ & rtil_signal_055_;
  assign rtil_signal_063_ = ! frac[26:13];
  assign rtil_signal_064_ = rtil_signal_067_ ? 5'h0e : rtil_signal_059_;
  assign rtil_signal_065_ = rtil_signal_067_ ? 1'h0 : rtil_signal_060_;
  assign rtil_signal_066_ = rtil_signal_060_ & rtil_signal_063_;
  assign rtil_signal_067_ = rtil_signal_066_ & rtil_signal_060_;
  assign rtil_signal_068_ = ! frac[26:14];
  assign rtil_signal_069_ = rtil_signal_072_ ? 5'h0d : rtil_signal_064_;
  assign rtil_signal_070_ = rtil_signal_072_ ? 1'h0 : rtil_signal_065_;
  assign rtil_signal_071_ = rtil_signal_065_ & rtil_signal_068_;
  assign rtil_signal_072_ = rtil_signal_071_ & rtil_signal_065_;
  assign rtil_signal_073_ = ! frac[26:15];
  assign rtil_signal_074_ = rtil_signal_077_ ? 5'h0c : rtil_signal_069_;
  assign rtil_signal_075_ = rtil_signal_077_ ? 1'h0 : rtil_signal_070_;
  assign rtil_signal_076_ = rtil_signal_070_ & rtil_signal_073_;
  assign rtil_signal_077_ = rtil_signal_076_ & rtil_signal_070_;
  assign rtil_signal_078_ = ! frac[26:16];
  assign rtil_signal_079_ = rtil_signal_082_ ? 5'h0b : rtil_signal_074_;
  assign rtil_signal_080_ = rtil_signal_082_ ? 1'h0 : rtil_signal_075_;
  assign rtil_signal_081_ = rtil_signal_075_ & rtil_signal_078_;
  assign rtil_signal_082_ = rtil_signal_081_ & rtil_signal_075_;
  assign rtil_signal_083_ = ! frac[26:17];
  assign rtil_signal_084_ = rtil_signal_087_ ? 5'h0a : rtil_signal_079_;
  assign rtil_signal_085_ = rtil_signal_087_ ? 1'h0 : rtil_signal_080_;
  assign rtil_signal_086_ = rtil_signal_080_ & rtil_signal_083_;
  assign rtil_signal_087_ = rtil_signal_086_ & rtil_signal_080_;
  assign rtil_signal_088_ = ! frac[26:18];
  assign rtil_signal_089_ = rtil_signal_092_ ? 5'h09 : rtil_signal_084_;
  assign rtil_signal_090_ = rtil_signal_092_ ? 1'h0 : rtil_signal_085_;
  assign rtil_signal_091_ = rtil_signal_085_ & rtil_signal_088_;
  assign rtil_signal_092_ = rtil_signal_091_ & rtil_signal_085_;
  assign rtil_signal_093_ = ! frac[26:19];
  assign rtil_signal_094_ = rtil_signal_097_ ? 5'h08 : rtil_signal_089_;
  assign rtil_signal_095_ = rtil_signal_097_ ? 1'h0 : rtil_signal_090_;
  assign rtil_signal_096_ = rtil_signal_090_ & rtil_signal_093_;
  assign rtil_signal_097_ = rtil_signal_096_ & rtil_signal_090_;
  assign rtil_signal_098_ = ! frac[26:20];
  assign rtil_signal_099_ = rtil_signal_102_ ? 5'h07 : rtil_signal_094_;
  assign rtil_signal_100_ = rtil_signal_102_ ? 1'h0 : rtil_signal_095_;
  assign rtil_signal_101_ = rtil_signal_095_ & rtil_signal_098_;
  assign rtil_signal_102_ = rtil_signal_101_ & rtil_signal_095_;
  assign rtil_signal_103_ = ! frac[26:21];
  assign rtil_signal_104_ = rtil_signal_107_ ? 5'h06 : rtil_signal_099_;
  assign rtil_signal_105_ = rtil_signal_107_ ? 1'h0 : rtil_signal_100_;
  assign rtil_signal_106_ = rtil_signal_100_ & rtil_signal_103_;
  assign rtil_signal_107_ = rtil_signal_106_ & rtil_signal_100_;
  assign rtil_signal_108_ = ! frac[26:22];
  assign rtil_signal_109_ = rtil_signal_112_ ? 5'h05 : rtil_signal_104_;
  assign rtil_signal_110_ = rtil_signal_112_ ? 1'h0 : rtil_signal_105_;
  assign rtil_signal_111_ = rtil_signal_105_ & rtil_signal_108_;
  assign rtil_signal_112_ = rtil_signal_111_ & rtil_signal_105_;
  assign rtil_signal_113_ = ! frac[26:23];
  assign rtil_signal_114_ = rtil_signal_117_ ? 5'h04 : rtil_signal_109_;
  assign rtil_signal_115_ = rtil_signal_117_ ? 1'h0 : rtil_signal_110_;
  assign rtil_signal_116_ = rtil_signal_110_ & rtil_signal_113_;
  assign rtil_signal_117_ = rtil_signal_116_ & rtil_signal_110_;
  assign rtil_signal_118_ = ! frac[26:24];
  assign rtil_signal_119_ = rtil_signal_122_ ? 5'h03 : rtil_signal_114_;
  assign rtil_signal_120_ = rtil_signal_122_ ? 1'h0 : rtil_signal_115_;
  assign rtil_signal_121_ = rtil_signal_115_ & rtil_signal_118_;
  assign rtil_signal_122_ = rtil_signal_121_ & rtil_signal_115_;
  assign rtil_signal_123_ = ! frac[26:25];
  assign rtil_signal_124_ = rtil_signal_127_ ? 5'h02 : rtil_signal_119_;
  assign rtil_signal_125_ = rtil_signal_127_ ? 1'h0 : rtil_signal_120_;
  assign rtil_signal_126_ = rtil_signal_120_ & rtil_signal_123_;
  assign rtil_signal_127_ = rtil_signal_126_ & rtil_signal_120_;
  assign rtil_signal_128_ = ~ frac[26];
  assign leadzerosbin = rtil_signal_130_ ? 5'h01 : rtil_signal_124_;
  assign rtil_signal_129_ = rtil_signal_125_ & rtil_signal_128_;
  assign rtil_signal_130_ = rtil_signal_129_ & rtil_signal_125_;
  assign rtil_signal_131_ = exp - { 3'h0, leadzerosbin };
  assign exp_norm = isz ? 8'h00 : rtil_signal_131_;
  assign rtil_signal_000_ = ! frac[26:0];
  assign isz = rtil_signal_000_ ? 1'h1 : 1'h0;
  assign rtil_signal_132_ = ~ isz;
  assign rtil_signal_133_ = exp > { 3'h0, leadzerosbin };
  assign rtil_signal_134_ = rtil_signal_133_ & rtil_signal_132_;
  assign underflow = rtil_signal_134_ ? 1'h0 : 1'h1;
  assign rtil_signal_135_ = leadzerosbin[4] ? { frac[11:0], 16'h0000 } : frac;
  assign rtil_signal_136_ = leadzerosbin[3] ? { rtil_signal_135_[19:0], 8'h00 } : rtil_signal_135_;
  assign rtil_signal_137_ = leadzerosbin[2] ? { rtil_signal_136_[23:0], 4'h0 } : rtil_signal_136_;
  assign rtil_signal_138_ = leadzerosbin[1] ? { rtil_signal_137_[25:0], 2'h0 } : rtil_signal_137_;
  assign frac_norm = leadzerosbin[0] ? { rtil_signal_138_[26:0], 1'h0 } : rtil_signal_138_;
endmodule

module multfp(entrada_x, entrada_y, salida, underflow, overflow);
  wire [22:0] rtil_signal_000_;
  wire [22:0] rtil_signal_001_;
  wire [22:0] rtil_signal_002_;
  wire [22:0] rtil_signal_003_;
  wire [22:0] rtil_signal_004_;
  wire [22:0] rtil_signal_005_;
  wire [22:0] rtil_signal_006_;
  wire [22:0] rtil_signal_007_;
  wire [22:0] rtil_signal_008_;
  wire [22:0] rtil_signal_009_;
  wire [22:0] rtil_signal_010_;
  wire [22:0] rtil_signal_011_;
  wire [22:0] rtil_signal_012_;
  wire [22:0] rtil_signal_013_;
  wire [22:0] rtil_signal_014_;
  wire [22:0] rtil_signal_015_;
  wire [22:0] rtil_signal_016_;
  wire [22:0] rtil_signal_017_;
  wire [22:0] rtil_signal_018_;
  wire [22:0] rtil_signal_019_;
  wire [22:0] rtil_signal_020_;
  wire [22:0] rtil_signal_021_;
  wire [22:0] rtil_signal_022_;
  wire [22:0] rtil_signal_023_;
  wire [22:0] rtil_signal_024_;
  wire [22:0] rtil_signal_025_;
  wire [22:0] rtil_signal_026_;
  wire [22:0] rtil_signal_027_;
  wire [22:0] rtil_signal_028_;
  wire [22:0] rtil_signal_029_;
  wire [31:0] rtil_signal_030_;
  wire [31:0] rtil_signal_031_;
  wire [31:0] rtil_signal_032_;
  wire [31:0] rtil_signal_033_;
  wire [31:0] rtil_signal_034_;
  wire [31:0] rtil_signal_035_;
  wire [31:0] rtil_signal_036_;
  wire [31:0] rtil_signal_037_;
  wire [31:0] rtil_signal_038_;
  wire [31:0] rtil_signal_039_;
  wire [31:0] rtil_signal_040_;
  wire [31:0] rtil_signal_041_;
  wire [31:0] rtil_signal_042_;
  wire [31:0] rtil_signal_043_;
  wire [31:0] rtil_signal_044_;
  wire [31:0] rtil_signal_045_;
  wire [31:0] rtil_signal_046_;
  wire [31:0] rtil_signal_047_;
  wire [31:0] rtil_signal_048_;
  wire [31:0] rtil_signal_049_;
  wire [5:0] rtil_signal_050_;
  wire [22:0] rtil_signal_051_;
  wire [22:0] rtil_signal_052_;
  wire [22:0] rtil_signal_053_;
  wire [22:0] rtil_signal_054_;
  wire [22:0] rtil_signal_055_;
  wire [22:0] rtil_signal_056_;
  wire [22:0] rtil_signal_057_;
  wire [22:0] rtil_signal_058_;
  wire [22:0] rtil_signal_059_;
  wire [22:0] rtil_signal_060_;
  wire [22:0] rtil_signal_061_;
  wire [22:0] rtil_signal_062_;
  wire [22:0] rtil_signal_063_;
  wire [22:0] rtil_signal_064_;
  wire [22:0] rtil_signal_065_;
  wire [22:0] rtil_signal_066_;
  wire rtil_signal_067_;
  wire rtil_signal_068_;
  wire rtil_signal_069_;
  wire rtil_signal_070_;
  wire rtil_signal_071_;
  wire rtil_signal_072_;
  wire rtil_signal_073_;
  wire rtil_signal_074_;
  wire [9:0] rtil_signal_075_;
  wire [9:0] rtil_signal_076_;
  wire [9:0] rtil_signal_077_;
  wire rtil_signal_078_;
  wire rtil_signal_079_;
  wire [30:0] rtil_signal_080_;
  wire rtil_signal_081_;
  wire rtil_signal_082_;
  wire [31:0] rtil_signal_083_;
  wire [31:0] rtil_signal_084_;
  wire [31:0] rtil_signal_085_;
  wire [31:0] rtil_signal_086_;
  wire [31:0] rtil_signal_087_;
  wire [31:0] rtil_signal_088_;
  wire [31:0] rtil_signal_089_;
  wire [31:0] rtil_signal_090_;
  wire [31:0] rtil_signal_091_;
  wire [31:0] rtil_signal_092_;
  wire [31:0] rtil_signal_093_;
  wire [31:0] rtil_signal_094_;
  wire [31:0] rtil_signal_095_;
  wire [31:0] rtil_signal_096_;
  wire [31:0] rtil_signal_097_;
  wire [31:0] rtil_signal_098_;
  wire [31:0] rtil_signal_099_;
  wire [31:0] rtil_signal_100_;
  wire [31:0] rtil_signal_101_;
  wire [31:0] rtil_signal_102_;
  wire [31:0] rtil_signal_103_;
  wire [31:0] rtil_signal_104_;
  wire [31:0] rtil_signal_105_;
  wire [31:0] rtil_signal_106_;
  wire [31:0] rtil_signal_107_;
  wire [31:0] rtil_signal_108_;
  wire [31:0] rtil_signal_109_;
  input [31:0] entrada_x;
  wire [31:0] entrada_x;
  input [31:0] entrada_y;
  wire [31:0] entrada_y;
  wire [9:0] exponente_final;
  wire [47:0] mantisa_final;
  wire [22:0] mantisa_real;
  output overflow;
  wire overflow;
  wire [31:0] resultado;
  output [31:0] salida;
  wire [31:0] salida;
  wire soverflow;
  wire sunderflow;
  output underflow;
  wire underflow;
  assign rtil_signal_000_ = rtil_signal_050_[0] ? mantisa_final[45:23] : mantisa_final[46:24];
  assign rtil_signal_001_ = rtil_signal_050_[0] ? mantisa_final[41:19] : mantisa_final[42:20];
  assign rtil_signal_002_ = rtil_signal_050_[0] ? mantisa_final[37:15] : mantisa_final[38:16];
  assign rtil_signal_003_ = rtil_signal_050_[0] ? mantisa_final[33:11] : mantisa_final[34:12];
  assign rtil_signal_004_ = rtil_signal_050_[0] ? mantisa_final[29:7] : mantisa_final[30:8];
  assign rtil_signal_005_ = rtil_signal_050_[0] ? mantisa_final[25:3] : mantisa_final[26:4];
  assign rtil_signal_006_ = rtil_signal_050_[0] ? { mantisa_final[21:0], 1'h0 } : mantisa_final[22:0];
  assign rtil_signal_007_ = rtil_signal_050_[0] ? { mantisa_final[17:0], 5'h00 } : { mantisa_final[18:0], 4'h0 };
  assign rtil_signal_008_ = rtil_signal_050_[0] ? { mantisa_final[13:0], 9'h000 } : { mantisa_final[14:0], 8'h00 };
  assign rtil_signal_009_ = rtil_signal_050_[0] ? { mantisa_final[9:0], 13'h0000 } : { mantisa_final[10:0], 12'h000 };
  assign rtil_signal_010_ = rtil_signal_050_[0] ? { mantisa_final[5:0], 17'h00000 } : { mantisa_final[6:0], 16'h0000 };
  assign rtil_signal_011_ = rtil_signal_050_[0] ? { mantisa_final[1:0], 21'h000000 } : { mantisa_final[2:0], 20'h00000 };
  assign rtil_signal_012_ = rtil_signal_050_[2] ? rtil_signal_052_ : rtil_signal_051_;
  assign rtil_signal_013_ = rtil_signal_050_[2] ? rtil_signal_056_ : rtil_signal_055_;
  assign rtil_signal_014_ = rtil_signal_050_[2] ? rtil_signal_060_ : rtil_signal_059_;
  assign rtil_signal_015_ = rtil_signal_050_[0] ? mantisa_final[43:21] : mantisa_final[44:22];
  assign rtil_signal_016_ = rtil_signal_050_[0] ? mantisa_final[39:17] : mantisa_final[40:18];
  assign rtil_signal_017_ = rtil_signal_050_[0] ? mantisa_final[35:13] : mantisa_final[36:14];
  assign rtil_signal_018_ = rtil_signal_050_[0] ? mantisa_final[31:9] : mantisa_final[32:10];
  assign rtil_signal_019_ = rtil_signal_050_[0] ? mantisa_final[27:5] : mantisa_final[28:6];
  assign rtil_signal_020_ = rtil_signal_050_[0] ? mantisa_final[23:1] : mantisa_final[24:2];
  assign rtil_signal_021_ = rtil_signal_050_[0] ? { mantisa_final[19:0], 3'h0 } : { mantisa_final[20:0], 2'h0 };
  assign rtil_signal_022_ = rtil_signal_050_[0] ? { mantisa_final[15:0], 7'h00 } : { mantisa_final[16:0], 6'h00 };
  assign rtil_signal_023_ = rtil_signal_050_[0] ? { mantisa_final[11:0], 11'h000 } : { mantisa_final[12:0], 10'h000 };
  assign rtil_signal_024_ = rtil_signal_050_[0] ? { mantisa_final[7:0], 15'h0000 } : { mantisa_final[8:0], 14'h0000 };
  assign rtil_signal_025_ = rtil_signal_050_[0] ? { mantisa_final[3:0], 19'h00000 } : { mantisa_final[4:0], 18'h00000 };
  assign rtil_signal_026_ = rtil_signal_050_[0] ? 23'h000000 : { mantisa_final[0], 22'h000000 };
  assign rtil_signal_027_ = rtil_signal_050_[2] ? rtil_signal_054_ : rtil_signal_053_;
  assign rtil_signal_028_ = rtil_signal_050_[2] ? rtil_signal_058_ : rtil_signal_057_;
  assign rtil_signal_029_ = rtil_signal_050_[2] ? rtil_signal_062_ : rtil_signal_061_;
  assign rtil_signal_051_ = rtil_signal_050_[1] ? rtil_signal_015_ : rtil_signal_000_;
  assign rtil_signal_052_ = rtil_signal_050_[1] ? rtil_signal_016_ : rtil_signal_001_;
  assign rtil_signal_053_ = rtil_signal_050_[1] ? rtil_signal_017_ : rtil_signal_002_;
  assign rtil_signal_054_ = rtil_signal_050_[1] ? rtil_signal_018_ : rtil_signal_003_;
  assign rtil_signal_055_ = rtil_signal_050_[1] ? rtil_signal_019_ : rtil_signal_004_;
  assign rtil_signal_056_ = rtil_signal_050_[1] ? rtil_signal_020_ : rtil_signal_005_;
  assign rtil_signal_057_ = rtil_signal_050_[1] ? rtil_signal_021_ : rtil_signal_006_;
  assign rtil_signal_058_ = rtil_signal_050_[1] ? rtil_signal_022_ : rtil_signal_007_;
  assign rtil_signal_059_ = rtil_signal_050_[1] ? rtil_signal_023_ : rtil_signal_008_;
  assign rtil_signal_060_ = rtil_signal_050_[1] ? rtil_signal_024_ : rtil_signal_009_;
  assign rtil_signal_061_ = rtil_signal_050_[1] ? rtil_signal_025_ : rtil_signal_010_;
  assign rtil_signal_062_ = rtil_signal_050_[1] ? rtil_signal_026_ : rtil_signal_011_;
  assign rtil_signal_063_ = rtil_signal_050_[3] ? rtil_signal_027_ : rtil_signal_012_;
  assign rtil_signal_064_ = rtil_signal_050_[3] ? rtil_signal_028_ : rtil_signal_013_;
  assign rtil_signal_065_ = rtil_signal_050_[3] ? rtil_signal_029_ : rtil_signal_014_;
  assign mantisa_final = { 25'h0000001, entrada_x[22:0] } * { 25'h0000001, entrada_y[22:0] };
  assign rtil_signal_067_ = ! entrada_x;
  assign rtil_signal_068_ = ! entrada_y;
  assign rtil_signal_069_ = rtil_signal_067_ | rtil_signal_068_;
  assign rtil_signal_070_ = entrada_x == 32'd2147483648;
  assign rtil_signal_071_ = rtil_signal_069_ | rtil_signal_070_;
  assign rtil_signal_072_ = entrada_y == 32'd2147483648;
  assign rtil_signal_073_ = rtil_signal_071_ | rtil_signal_072_;
  assign rtil_signal_074_ = entrada_x[31] ^ entrada_y[31];
  assign salida = rtil_signal_073_ ? 32'd0 : { rtil_signal_074_, resultado[30:0] };
  assign underflow = rtil_signal_073_ ? 1'h0 : sunderflow;
  assign overflow = rtil_signal_073_ ? 1'h0 : soverflow;
  assign rtil_signal_076_ = rtil_signal_075_ - 10'h07e;
  assign rtil_signal_075_ = { 2'h0, entrada_x[30:23] } + { 2'h0, entrada_y[30:23] };
  assign rtil_signal_077_ = rtil_signal_075_ - 10'h07f;
  assign exponente_final = mantisa_final[47] ? rtil_signal_076_ : rtil_signal_077_;
  assign rtil_signal_078_ = $signed(exponente_final) > $signed(10'h0ff);
  assign rtil_signal_079_ = $signed(exponente_final) < $signed(10'h000);
  assign rtil_signal_080_ = rtil_signal_079_ ? 31'h00000000 : { exponente_final[7:0], mantisa_real };
  assign rtil_signal_081_ = rtil_signal_079_ ? 1'h0 : resultado[31];
  assign rtil_signal_082_ = rtil_signal_079_ ? 1'h1 : 1'h0;
  assign resultado = rtil_signal_078_ ? 32'd0 : { rtil_signal_081_, rtil_signal_080_ };
  assign sunderflow = rtil_signal_078_ ? 1'h0 : rtil_signal_082_;
  assign soverflow = rtil_signal_078_ ? 1'h1 : 1'h0;
  assign rtil_signal_083_ = mantisa_final[1] ? 32'd1 : 32'd0;
  assign rtil_signal_084_ = mantisa_final[2] ? 32'd2 : rtil_signal_083_;
  assign rtil_signal_085_ = mantisa_final[3] ? 32'd3 : rtil_signal_084_;
  assign rtil_signal_086_ = mantisa_final[4] ? 32'd4 : rtil_signal_085_;
  assign rtil_signal_087_ = mantisa_final[5] ? 32'd5 : rtil_signal_086_;
  assign rtil_signal_088_ = mantisa_final[6] ? 32'd6 : rtil_signal_087_;
  assign rtil_signal_089_ = mantisa_final[7] ? 32'd7 : rtil_signal_088_;
  assign rtil_signal_090_ = mantisa_final[8] ? 32'd8 : rtil_signal_089_;
  assign rtil_signal_091_ = mantisa_final[9] ? 32'd9 : rtil_signal_090_;
  assign rtil_signal_092_ = mantisa_final[10] ? 32'd10 : rtil_signal_091_;
  assign rtil_signal_093_ = mantisa_final[11] ? 32'd11 : rtil_signal_092_;
  assign rtil_signal_094_ = mantisa_final[12] ? 32'd12 : rtil_signal_093_;
  assign rtil_signal_095_ = mantisa_final[13] ? 32'd13 : rtil_signal_094_;
  assign rtil_signal_096_ = mantisa_final[14] ? 32'd14 : rtil_signal_095_;
  assign rtil_signal_097_ = mantisa_final[15] ? 32'd15 : rtil_signal_096_;
  assign rtil_signal_098_ = mantisa_final[16] ? 32'd16 : rtil_signal_097_;
  assign rtil_signal_099_ = mantisa_final[17] ? 32'd17 : rtil_signal_098_;
  assign rtil_signal_100_ = mantisa_final[18] ? 32'd18 : rtil_signal_099_;
  assign rtil_signal_101_ = mantisa_final[19] ? 32'd19 : rtil_signal_100_;
  assign rtil_signal_102_ = mantisa_final[20] ? 32'd20 : rtil_signal_101_;
  assign rtil_signal_103_ = mantisa_final[21] ? 32'd21 : rtil_signal_102_;
  assign rtil_signal_104_ = mantisa_final[22] ? 32'd22 : rtil_signal_103_;
  assign rtil_signal_105_ = mantisa_final[23] ? 32'd23 : rtil_signal_104_;
  assign rtil_signal_106_ = mantisa_final[24] ? 32'd24 : rtil_signal_105_;
  assign rtil_signal_107_ = mantisa_final[25] ? 32'd25 : rtil_signal_106_;
  assign rtil_signal_108_ = mantisa_final[26] ? 32'd26 : rtil_signal_107_;
  assign rtil_signal_109_ = mantisa_final[27] ? 32'd27 : rtil_signal_108_;
  assign rtil_signal_030_ = mantisa_final[28] ? 32'd28 : rtil_signal_109_;
  assign rtil_signal_031_ = mantisa_final[29] ? 32'd29 : rtil_signal_030_;
  assign rtil_signal_032_ = mantisa_final[30] ? 32'd30 : rtil_signal_031_;
  assign rtil_signal_033_ = mantisa_final[31] ? 32'd31 : rtil_signal_032_;
  assign rtil_signal_034_ = mantisa_final[32] ? 32'd32 : rtil_signal_033_;
  assign rtil_signal_035_ = mantisa_final[33] ? 32'd33 : rtil_signal_034_;
  assign rtil_signal_036_ = mantisa_final[34] ? 32'd34 : rtil_signal_035_;
  assign rtil_signal_037_ = mantisa_final[35] ? 32'd35 : rtil_signal_036_;
  assign rtil_signal_038_ = mantisa_final[36] ? 32'd36 : rtil_signal_037_;
  assign rtil_signal_039_ = mantisa_final[37] ? 32'd37 : rtil_signal_038_;
  assign rtil_signal_040_ = mantisa_final[38] ? 32'd38 : rtil_signal_039_;
  assign rtil_signal_041_ = mantisa_final[39] ? 32'd39 : rtil_signal_040_;
  assign rtil_signal_042_ = mantisa_final[40] ? 32'd40 : rtil_signal_041_;
  assign rtil_signal_043_ = mantisa_final[41] ? 32'd41 : rtil_signal_042_;
  assign rtil_signal_044_ = mantisa_final[42] ? 32'd42 : rtil_signal_043_;
  assign rtil_signal_045_ = mantisa_final[43] ? 32'd43 : rtil_signal_044_;
  assign rtil_signal_046_ = mantisa_final[44] ? 32'd44 : rtil_signal_045_;
  assign rtil_signal_047_ = mantisa_final[45] ? 32'd45 : rtil_signal_046_;
  assign rtil_signal_048_ = mantisa_final[46] ? 32'd46 : rtil_signal_047_;
  assign rtil_signal_049_ = mantisa_final[47] ? 32'd47 : rtil_signal_048_;
  assign rtil_signal_050_ = 6'h2f - rtil_signal_049_[5:0];
  assign rtil_signal_066_ = rtil_signal_050_[4] ? rtil_signal_064_ : rtil_signal_063_;
  assign mantisa_real = rtil_signal_050_[5] ? rtil_signal_065_ : rtil_signal_066_;
endmodule

module right_shifter_27_8_4(frac, diff_exp, frac_align);
  wire rtil_signal_00_;
  wire rtil_signal_01_;
  wire [27:0] rtil_signal_02_;
  wire rtil_signal_03_;
  wire rtil_signal_04_;
  wire rtil_signal_05_;
  wire [27:0] rtil_signal_06_;
  wire rtil_signal_07_;
  wire rtil_signal_08_;
  wire rtil_signal_09_;
  wire [27:0] rtil_signal_10_;
  wire rtil_signal_11_;
  wire rtil_signal_12_;
  wire rtil_signal_13_;
  wire [27:0] rtil_signal_14_;
  wire rtil_signal_15_;
  wire rtil_signal_16_;
  wire [27:0] rtil_signal_17_;
  wire rtil_signal_18_;
  wire rtil_signal_19_;
  input [8:0] diff_exp;
  wire [8:0] diff_exp;
  input [27:0] frac;
  wire [27:0] frac;
  output [27:0] frac_align;
  wire [27:0] frac_align;
  wire [27:0] fracalign_int;
  assign rtil_signal_00_ = | frac[15:0];
  assign rtil_signal_01_ = rtil_signal_00_ ? 1'h1 : 1'h0;
  assign rtil_signal_02_ = diff_exp[4] ? { 16'h0000, frac[27:16] } : frac;
  assign rtil_signal_03_ = diff_exp[4] ? rtil_signal_01_ : 1'h0;
  assign rtil_signal_04_ = | rtil_signal_02_[7:0];
  assign rtil_signal_05_ = rtil_signal_04_ ? 1'h1 : 1'h0;
  assign rtil_signal_06_ = diff_exp[3] ? { 8'h00, rtil_signal_02_[27:8] } : rtil_signal_02_;
  assign rtil_signal_07_ = diff_exp[3] ? rtil_signal_05_ : rtil_signal_03_;
  assign rtil_signal_08_ = | rtil_signal_06_[3:0];
  assign rtil_signal_09_ = rtil_signal_08_ ? 1'h1 : 1'h0;
  assign rtil_signal_10_ = diff_exp[2] ? { 4'h0, rtil_signal_06_[27:4] } : rtil_signal_06_;
  assign rtil_signal_11_ = diff_exp[2] ? rtil_signal_09_ : rtil_signal_07_;
  assign rtil_signal_12_ = | rtil_signal_10_[1:0];
  assign rtil_signal_13_ = rtil_signal_12_ ? 1'h1 : 1'h0;
  assign rtil_signal_14_ = diff_exp[1] ? { 2'h0, rtil_signal_10_[27:2] } : rtil_signal_10_;
  assign rtil_signal_15_ = diff_exp[1] ? rtil_signal_13_ : rtil_signal_11_;
  assign rtil_signal_16_ = rtil_signal_14_[0] ? 1'h1 : 1'h0;
  assign { fracalign_int[27:1], rtil_signal_17_[0] } = diff_exp[0] ? { 1'h0, rtil_signal_14_[27:1] } : rtil_signal_14_;
  assign rtil_signal_18_ = diff_exp[0] ? rtil_signal_16_ : rtil_signal_15_;
  assign fracalign_int[0] = rtil_signal_17_[0] | rtil_signal_18_;
  assign rtil_signal_19_ = ! diff_exp[8:5];
  assign frac_align = rtil_signal_19_ ? fracalign_int : 28'h0000001;
  assign rtil_signal_17_[27:1] = fracalign_int[27:1];
endmodule

module rro(selec_phase, rro_input , Result);
  wire [31:0] rtil_signal_00_;
  wire rtil_signal_01_;
  wire rtil_signal_02_;
  wire [31:0] rtil_signal_03_;
  wire rtil_signal_04_;
  wire rtil_signal_05_;
  wire rtil_signal_06_;
  wire [31:0] rtil_signal_07_;
  wire rtil_signal_08_;
  wire rtil_signal_09_;
  wire [31:0] rtil_signal_10_;
  wire rtil_signal_11_;
  wire [31:0] rtil_signal_12_;
  wire rtil_signal_13_;
  wire rtil_signal_14_;
  wire rtil_signal_15_;
  wire [31:0] rtil_signal_16_;
  wire rtil_signal_17_;
  output [31:0] Result;
  wire [31:0] Result;
  wire [31:0] ieee_out_sin_cos;
  input [31:0] rro_input ;
  wire [31:0] rro_input ;
  wire [23:0] rro_trig_fixed_point;
  wire [31:0] rro_trig_out;
  wire [1:0] rro_trig_qua;
  wire [7:0] rro_trig_shift;
  wire [31:0] s_exp2_adjs;
  wire [31:0] s_exp2_cmp;
  wire [31:0] s_exp2_final_result;
  wire [31:0] s_exp2_fixed_point;
  wire [7:0] s_exp2_shift;
  wire s_too_big_exponent;
  input selec_phase;
  wire selec_phase;
  assign rtil_signal_02_ = rro_input  == 32'd4286578688;
  assign rtil_signal_03_ = rtil_signal_02_ ? 32'd4160749568 : rtil_signal_07_;
  assign rtil_signal_04_ = rro_input [30:23] == 8'hff;
  assign rtil_signal_05_ = | rro_input [22:0];
  assign rtil_signal_06_ = rtil_signal_05_ & rtil_signal_04_;
  assign rtil_signal_07_ = rtil_signal_06_ ? { 9'h1ff, rro_input [22:0] } : rtil_signal_10_;
  assign rtil_signal_08_ = ~ rro_input [31];
  assign rtil_signal_09_ = rtil_signal_08_ & s_too_big_exponent;
  assign rtil_signal_10_ = rtil_signal_09_ ? 32'd2273312768 : rtil_signal_12_;
  assign rro_trig_shift = 8'h7f - rro_trig_out[30:23];
  assign rtil_signal_11_ = rro_input [31] & s_too_big_exponent;
  assign rtil_signal_12_ = rtil_signal_11_ ? 32'd4160749568 : rtil_signal_16_;
  assign rtil_signal_13_ = ! rro_input ;
  assign rtil_signal_14_ = ! rro_input [30:23];
  assign rtil_signal_15_ = rtil_signal_13_ | rtil_signal_14_;
  assign rtil_signal_16_ = rtil_signal_15_ ? 32'd2147483648 : { 1'h0, s_exp2_adjs[30:0] };
  assign Result = selec_phase ? s_exp2_final_result : ieee_out_sin_cos;
  assign rro_trig_fixed_point = { 1'h1, rro_trig_out[22:0] } >> { 24'h000000, rro_trig_shift };
  assign ieee_out_sin_cos = rtil_signal_04_ ? rro_input  : { rro_input [31], rro_trig_qua, 5'h00, rro_trig_fixed_point };
  assign rtil_signal_17_ = rro_input [30:23] > 8'h85;
  assign s_too_big_exponent = rtil_signal_17_ ? 1'h1 : 1'h0;
  assign s_exp2_shift = 8'h85 - rro_input [30:23];
  assign s_exp2_fixed_point = { 3'h1, rro_input [22:0], 6'h00 } >> { 24'h000000, s_exp2_shift };
  assign s_exp2_cmp = s_exp2_fixed_point ^ { rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31], rro_input [31] };
  assign rtil_signal_00_ = s_exp2_cmp + 32'd1;
  assign s_exp2_adjs = rro_input [31] ? rtil_signal_00_ : s_exp2_cmp;
  assign rtil_signal_01_ = rro_input  == 32'd2139095040;
  assign s_exp2_final_result = rtil_signal_01_ ? 32'd2273312768 : rtil_signal_03_;
  rro_trig u0 (
    .input_data(rro_input ),
    .output_data(rro_trig_out),
    .quadrant(rro_trig_qua)
  );
endmodule

module rro_trig(input_data, output_data, quadrant);
  wire rtil_signal_0_;
  wire rtil_signal_1_;
  wire rtil_signal_2_;
  wire rtil_signal_3_;
  wire rtil_signal_4_;
  wire rtil_signal_5_;
  wire rtil_signal_6_;
  wire [31:0] floor_fp;
  wire [253:0] floor_tmp;
  wire [253:0] floor_tmp3;
  input [31:0] input_data;
  wire [31:0] input_data;
  wire [31:0] mult1;
  wire [31:0] mult2;
  wire [31:0] mult3;
  output [31:0] output_data;
  wire [31:0] output_data;
  wire [31:0] output_sign;
  output [1:0] quadrant;
  wire [1:0] quadrant;
  wire [7:0] shift_select;
  wire [31:0] sub1;
  assign shift_select = 8'hfe - mult1[30:23];
  assign floor_tmp = { 1'h1, mult1[22:0], 230'h0000000000000000000000000000000000000000000000000000000000 } >> { 24'h000000, shift_select };
  assign floor_tmp3 = { floor_tmp[253:126], 126'h00000000000000000000000000000000 } << { 24'h000000, shift_select };
  assign rtil_signal_2_ = | floor_tmp3;
  assign floor_fp[30:23] = rtil_signal_2_ ? mult1[30:23] : 8'h00;
  multfp m0 (
    .entrada_x({ 1'h0, input_data[30:0] }),
    .entrada_y(32'd1059256707),
    .overflow(rtil_signal_1_),
    .salida(mult1),
    .underflow(rtil_signal_0_)
  );
  multfp m1 (
    .entrada_x({ 1'h0, floor_fp[30:23], floor_tmp3[252:230] }),
    .entrada_y(32'd1070137344),
    .overflow(rtil_signal_4_),
    .salida(mult2),
    .underflow(rtil_signal_3_)
  );
  multfp m2 (
    .entrada_x({ 1'h0, floor_fp[30:23], floor_tmp3[252:230] }),
    .entrada_y(32'd972925474),
    .overflow(rtil_signal_6_),
    .salida(mult3),
    .underflow(rtil_signal_5_)
  );
  add_sub_mod_32_24_8 s1 (
    .add_sub(1'h0),
    .fp_a({ 1'h0, input_data[30:0] }),
    .fp_b(mult2),
    .fp_z(sub1)
  );
  add_sub_mod_32_24_8 s2 (
    .add_sub(1'h0),
    .fp_a(sub1),
    .fp_b(mult3),
    .fp_z(output_sign)
  );
  assign { floor_fp[31], floor_fp[22:0] } = { 1'h0, floor_tmp3[252:230] };
  assign output_data = { input_data[31], output_sign[30:0] };
  assign quadrant = floor_tmp[127:126];
endmodule
