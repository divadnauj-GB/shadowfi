/* Generated by Yosys 0.47+61 (git sha1 81011ad92, clang++ 18.1.8 -fPIC -O3) */

module dot_unit_core(clk, rst, a_x0, a_x1, a_x2, a_x3, b_x0, b_x1, b_x2, b_x3, c_x0, w_xx3);
  wire [31:0] a_plus_b_s;
  input [31:0] a_x0;
  wire [31:0] a_x0;
  wire [31:0] a_x0_b_x0_plus_a_x1_b_x1_s;
  wire [31:0] a_x0_b_x0_s;
  input [31:0] a_x1;
  wire [31:0] a_x1;
  wire [31:0] a_x1_b_x1_s;
  input [31:0] a_x2;
  wire [31:0] a_x2;
  wire [31:0] a_x2_b_x2_plus_a_x3_b_x3_s;
  wire [31:0] a_x2_b_x2_s;
  input [31:0] a_x3;
  wire [31:0] a_x3;
  wire [31:0] a_x3_b_x3_s;
  input [31:0] b_x0;
  wire [31:0] b_x0;
  input [31:0] b_x1;
  wire [31:0] b_x1;
  input [31:0] b_x2;
  wire [31:0] b_x2;
  input [31:0] b_x3;
  wire [31:0] b_x3;
  input [31:0] c_x0;
  wire [31:0] c_x0;
  input clk;
  wire clk;
  input rst;
  wire rst;
  output [31:0] w_xx3;
  wire [31:0] w_xx3;
  fpadd_3_pipe adder0 (
    .clk(clk),
    .r(a_x0_b_x0_plus_a_x1_b_x1_s),
    .rst(rst),
    .x(a_x0_b_x0_s),
    .y(a_x1_b_x1_s)
  );
  fpadd_3_pipe adder1 (
    .clk(clk),
    .r(a_x2_b_x2_plus_a_x3_b_x3_s),
    .rst(rst),
    .x(a_x2_b_x2_s),
    .y(a_x3_b_x3_s)
  );
  fpadd_3_pipe adder2 (
    .clk(clk),
    .r(a_plus_b_s),
    .rst(rst),
    .x(a_x0_b_x0_plus_a_x1_b_x1_s),
    .y(a_x2_b_x2_plus_a_x3_b_x3_s)
  );
  fpadd_3_pipe adder3 (
    .clk(clk),
    .r(w_xx3),
    .rst(rst),
    .x(a_plus_b_s),
    .y(c_x0)
  );
  fpmult_3_pipe fmul0 (
    .clk(clk),
    .r(a_x0_b_x0_s),
    .rst(rst),
    .x(a_x0),
    .y(b_x0)
  );
  fpmult_3_pipe fmul1 (
    .clk(clk),
    .r(a_x1_b_x1_s),
    .rst(rst),
    .x(a_x1),
    .y(b_x1)
  );
  fpmult_3_pipe fmul2 (
    .clk(clk),
    .r(a_x2_b_x2_s),
    .rst(rst),
    .x(a_x2),
    .y(b_x2)
  );
  fpmult_3_pipe fmul3 (
    .clk(clk),
    .r(a_x3_b_x3_s),
    .rst(rst),
    .x(a_x3),
    .y(b_x3)
  );
endmodule

module dspblock_17x24_freq625_uid9(clk, rst, x, y, r);
  input clk;
  wire clk;
  output [40:0] r;
  wire [40:0] r;
  input rst;
  wire rst;
  input [16:0] x;
  wire [16:0] x;
  input [23:0] y;
  wire [23:0] y;
  assign r = { 24'h000000, x } * { 17'h00000, y };
endmodule

module dspblock_7x24_freq625_uid11(clk, rst, x, y, r);
  input clk;
  wire clk;
  output [30:0] r;
  wire [30:0] r;
  input rst;
  wire rst;
  input [6:0] x;
  wire [6:0] x;
  input [23:0] y;
  wire [23:0] y;
  assign r = { 24'h000000, x } * { 7'h00, y };
endmodule

module fpadd_3_pipe(clk, rst, x, y, r);
  wire ghdl_rtil_signal_00_;
  wire ghdl_rtil_signal_01_;
  wire ghdl_rtil_signal_02_;
  wire [4:0] ghdl_rtil_signal_03_;
  wire ghdl_rtil_signal_04_;
  wire ghdl_rtil_signal_05_;
  wire ghdl_rtil_signal_06_;
  wire ghdl_rtil_signal_07_;
  wire ghdl_rtil_signal_08_;
  wire ghdl_rtil_signal_09_;
  wire ghdl_rtil_signal_10_;
  wire ghdl_rtil_signal_11_;
  wire ghdl_rtil_signal_12_;
  wire ghdl_rtil_signal_13_;
  wire ghdl_rtil_signal_14_;
  wire [7:0] ghdl_rtil_signal_15_;
  wire [7:0] ghdl_rtil_signal_16_;
  wire ghdl_rtil_signal_17_;
  wire ghdl_rtil_signal_18_;
  wire ghdl_rtil_signal_19_;
  wire ghdl_rtil_signal_20_;
  wire ghdl_rtil_signal_21_;
  wire [7:0] ghdl_rtil_signal_22_;
  wire ghdl_rtil_signal_23_;
  wire ghdl_rtil_signal_24_;
  wire ghdl_rtil_signal_25_;
  wire ghdl_rtil_signal_26_;
  wire ghdl_rtil_signal_27_;
  wire ghdl_rtil_signal_28_;
  wire ghdl_rtil_signal_29_;
  wire ghdl_rtil_signal_30_;
  wire ghdl_rtil_signal_31_;
  wire ghdl_rtil_signal_32_;
  wire ghdl_rtil_signal_33_;
  wire ghdl_rtil_signal_34_;
  wire ghdl_rtil_signal_35_;
  wire ghdl_rtil_signal_36_;
  wire ghdl_rtil_signal_37_;
  wire ghdl_rtil_signal_38_;
  wire ghdl_rtil_signal_39_;
  wire ghdl_rtil_signal_40_;
  wire ghdl_rtil_signal_41_;
  wire ghdl_rtil_signal_42_;
  wire [30:0] ghdl_rtil_signal_43_;
  wire ghdl_rtil_signal_44_;
  wire ghdl_rtil_signal_45_;
  wire ghdl_rtil_signal_46_;
  wire ghdl_rtil_signal_47_;
  wire ghdl_rtil_signal_48_;
  wire ghdl_rtil_signal_49_;
  wire ghdl_rtil_signal_50_;
  wire ghdl_rtil_signal_51_;
  wire ghdl_rtil_signal_52_;
  wire ghdl_rtil_signal_53_;
  wire ghdl_rtil_signal_54_;
  wire ghdl_rtil_signal_55_;
  wire ghdl_rtil_signal_56_;
  wire ghdl_rtil_signal_57_;
  wire ghdl_rtil_signal_58_;
  wire ghdl_rtil_signal_59_;
  wire ghdl_rtil_signal_60_;
  wire ghdl_rtil_signal_61_;
  wire ghdl_rtil_signal_62_;
  wire ghdl_rtil_signal_63_;
  wire ghdl_rtil_signal_64_;
  wire ghdl_rtil_signal_65_;
  wire ghdl_rtil_signal_66_;
  wire ghdl_rtil_signal_67_;
  wire ghdl_rtil_signal_68_;
  wire ghdl_rtil_signal_69_;
  wire ghdl_rtil_signal_70_;
  wire allshiftedout;
  wire carryin;
  input clk;
  wire clk;
  wire [30:0] constinf_d1;
  wire [30:0] constinf_d2;
  wire [30:0] constinf_d3;
  reg [30:0] constnan_d1;
  reg [30:0] constnan_d2;
  reg [30:0] constnan_d3;
  wire [7:0] deltaexp;
  wire effsub;
  reg effsub_d1;
  reg effsub_d2;
  reg effsub_d3;
  wire [8:0] expdiff;
  reg [7:0] expnewx_d1;
  reg [7:0] expnewx_d2;
  wire [7:0] exppreround;
  wire [30:0] expsigr;
  wire [30:0] expsigr2;
  wire [8:0] expxmexpy;
  wire [8:0] expymexpx;
  wire [4:0] finalrightshiftvalue;
  wire [26:0] \fracadder:497 ;
  wire fullcancellation;
  reg fullcancellation_d1;
  wire [4:0] \ieeefpadd_8_23_freq150_uid2leadingzerocounter:503 ;
  wire [52:0] \leftshiftercomponent:536 ;
  wire [4:0] leftshiftval;
  reg lsb_d1;
  wire [31:0] newx;
  wire [31:0] newy;
  reg [52:0] normalizedsignificand_d1;
  output [31:0] r;
  wire [31:0] r;
  wire resultisinf;
  wire resultisnan;
  reg resultisnan_d1;
  reg resultisnan_d2;
  reg resultisnan_d3;
  wire resultiszero;
  wire [25:0] \rightshiftercomponent:470 ;
  wire \rightshiftercomponent:471 ;
  wire [4:0] rightshiftvalue;
  reg roundbit_d1;
  wire roundupbit;
  input rst;
  wire rst;
  wire shiftcorrection;
  wire [23:0] significandnewx;
  wire [23:0] significandnewy;
  reg signnewx_d1;
  reg signnewx_d2;
  reg signnewx_d3;
  reg signnewy_d1;
  reg signnewy_d2;
  reg signnewy_d3;
  wire signr;
  wire stickybit;
  reg stickylow_d1;
  reg stickylow_d2;
  wire [26:0] summandy;
  input [31:0] x;
  wire [31:0] x;
  wire xexpfieldallones;
  wire xexpfieldzero;
  reg xexpfieldzero_d1;
  reg xexpfieldzero_d2;
  wire xisinfinity;
  reg xisinfinity_d1;
  reg xisinfinity_d2;
  reg xisinfinity_d3;
  wire xisnan;
  wire xiszero;
  reg xiszero_d1;
  reg xiszero_d2;
  reg xiszero_d3;
  wire xsigfieldzero;
  input [31:0] y;
  wire [31:0] y;
  wire yexpfieldallones;
  wire yexpfieldzero;
  wire yisinfinity;
  reg yisinfinity_d1;
  reg yisinfinity_d2;
  reg yisinfinity_d3;
  wire yisnan;
  wire yiszero;
  reg yiszero_d1;
  reg yiszero_d2;
  reg yiszero_d3;
  wire ysigfieldzero;
  reg z0_d1;
  reg z1_d1;
  reg [7:0] ghdl_rtil_signal_71_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_71_ <= 8'h00;
    else ghdl_rtil_signal_71_ <= 8'hff;
  assign constinf_d1[30:23] = ghdl_rtil_signal_71_;
  reg [7:0] ghdl_rtil_signal_72_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_72_ <= 8'h00;
    else ghdl_rtil_signal_72_ <= constinf_d1[30:23];
  assign constinf_d2[30:23] = ghdl_rtil_signal_72_;
  reg [7:0] ghdl_rtil_signal_73_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_73_ <= 8'h00;
    else ghdl_rtil_signal_73_ <= constinf_d2[30:23];
  assign constinf_d3[30:23] = ghdl_rtil_signal_73_;
  assign expxmexpy = { 1'h0, x[30:23] } - { 1'h0, y[30:23] };
  assign expymexpx = { 1'h0, y[30:23] } - { 1'h0, x[30:23] };
  assign ghdl_rtil_signal_53_ = x[30:0] >= y[30:0];
  assign newx = ghdl_rtil_signal_53_ ? x : y;
  assign newy = ghdl_rtil_signal_53_ ? y : x;
  assign expdiff = ghdl_rtil_signal_53_ ? expxmexpy : expymexpx;
  assign effsub = newx[31] ^ newy[31];
  assign ghdl_rtil_signal_54_ = ! newx[30:23];
  assign xexpfieldzero = ghdl_rtil_signal_54_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_55_ = ! newy[30:23];
  assign yexpfieldzero = ghdl_rtil_signal_55_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_56_ = newx[30:23] == 8'hff;
  assign xexpfieldallones = ghdl_rtil_signal_56_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_57_ = newy[30:23] == 8'hff;
  assign yexpfieldallones = ghdl_rtil_signal_57_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_58_ = ! newx[22:0];
  assign xsigfieldzero = ghdl_rtil_signal_58_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_59_ = ! newy[22:0];
  assign ysigfieldzero = ghdl_rtil_signal_59_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_60_ = ~ xsigfieldzero;
  assign xisnan = xexpfieldallones & ghdl_rtil_signal_60_;
  assign ghdl_rtil_signal_61_ = ~ ysigfieldzero;
  assign yisnan = yexpfieldallones & ghdl_rtil_signal_61_;
  assign xisinfinity = xexpfieldallones & xsigfieldzero;
  assign yisinfinity = yexpfieldallones & ysigfieldzero;
  assign xiszero = xexpfieldzero & xsigfieldzero;
  assign yiszero = yexpfieldzero & ysigfieldzero;
  assign ghdl_rtil_signal_62_ = xisnan | yisnan;
  assign ghdl_rtil_signal_63_ = xisinfinity & yisinfinity;
  assign ghdl_rtil_signal_64_ = ghdl_rtil_signal_63_ & effsub;
  assign resultisnan = ghdl_rtil_signal_62_ | ghdl_rtil_signal_64_;
  assign significandnewy[23] = ~ yexpfieldzero;
  assign ghdl_rtil_signal_65_ = expdiff >= 9'h01a;
  assign allshiftedout = ghdl_rtil_signal_65_ ? 1'h1 : 1'h0;
  assign rightshiftvalue = allshiftedout ? 5'h1a : expdiff[4:0];
  assign significandnewx[23] = ~ xexpfieldzero;
  assign ghdl_rtil_signal_66_ = significandnewx[23] & yexpfieldzero;
  assign shiftcorrection = ghdl_rtil_signal_66_ ? 1'h1 : 1'h0;
  assign finalrightshiftvalue = rightshiftvalue - { 4'h0, shiftcorrection };
  assign summandy = { 1'h0, \rightshiftercomponent:470  } ^ { effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub };
  assign ghdl_rtil_signal_67_ = ~ \rightshiftercomponent:471 ;
  assign carryin = effsub_d1 & ghdl_rtil_signal_67_;
  assign ghdl_rtil_signal_68_ = ghdl_rtil_signal_14_ | ghdl_rtil_signal_19_;
  assign ghdl_rtil_signal_69_ = ghdl_rtil_signal_23_ & ghdl_rtil_signal_07_;
  assign ghdl_rtil_signal_70_ = ghdl_rtil_signal_68_ | ghdl_rtil_signal_69_;
  assign leftshiftval = ghdl_rtil_signal_70_ ? \ieeefpadd_8_23_freq150_uid2leadingzerocounter:503  : ghdl_rtil_signal_03_;
  assign ghdl_rtil_signal_00_ = ghdl_rtil_signal_20_ & ghdl_rtil_signal_07_;
  assign ghdl_rtil_signal_01_ = { 3'h0, \ieeefpadd_8_23_freq150_uid2leadingzerocounter:503  } >= expnewx_d2;
  assign ghdl_rtil_signal_02_ = ghdl_rtil_signal_01_ & ghdl_rtil_signal_00_;
  assign ghdl_rtil_signal_03_ = ghdl_rtil_signal_02_ ? expnewx_d2[4:0] : 5'h01;
  assign ghdl_rtil_signal_04_ = stickylow_d2 | normalizedsignificand_d1[1];
  assign stickybit = ghdl_rtil_signal_04_ | normalizedsignificand_d1[0];
  assign ghdl_rtil_signal_08_ = ghdl_rtil_signal_07_ & ghdl_rtil_signal_06_;
  assign ghdl_rtil_signal_11_ = xexpfieldzero_d2 & ghdl_rtil_signal_10_;
  assign ghdl_rtil_signal_12_ = ghdl_rtil_signal_08_ | ghdl_rtil_signal_11_;
  assign deltaexp = ghdl_rtil_signal_12_ ? 8'h00 : ghdl_rtil_signal_15_;
  assign ghdl_rtil_signal_06_ = z0_d1 & ghdl_rtil_signal_05_;
  assign ghdl_rtil_signal_13_ = xexpfieldzero_d2 & ghdl_rtil_signal_06_;
  assign ghdl_rtil_signal_14_ = z1_d1 | ghdl_rtil_signal_13_;
  assign ghdl_rtil_signal_15_ = ghdl_rtil_signal_14_ ? 8'hff : ghdl_rtil_signal_22_;
  assign ghdl_rtil_signal_16_ = { 3'h0, \ieeefpadd_8_23_freq150_uid2leadingzerocounter:503  } - 8'h01;
  assign ghdl_rtil_signal_05_ = ~ z1_d1;
  assign ghdl_rtil_signal_09_ = ~ z0_d1;
  assign ghdl_rtil_signal_10_ = ghdl_rtil_signal_09_ & ghdl_rtil_signal_05_;
  assign ghdl_rtil_signal_07_ = ~ xexpfieldzero_d2;
  assign ghdl_rtil_signal_17_ = ghdl_rtil_signal_07_ & ghdl_rtil_signal_10_;
  assign ghdl_rtil_signal_18_ = { 3'h0, \ieeefpadd_8_23_freq150_uid2leadingzerocounter:503  } <= expnewx_d2;
  assign ghdl_rtil_signal_19_ = ghdl_rtil_signal_18_ & ghdl_rtil_signal_17_;
  assign ghdl_rtil_signal_20_ = \ieeefpadd_8_23_freq150_uid2leadingzerocounter:503  < 5'h1a;
  assign ghdl_rtil_signal_21_ = ghdl_rtil_signal_20_ & ghdl_rtil_signal_19_;
  assign ghdl_rtil_signal_22_ = ghdl_rtil_signal_21_ ? ghdl_rtil_signal_16_ : expnewx_d2;
  assign ghdl_rtil_signal_23_ = \ieeefpadd_8_23_freq150_uid2leadingzerocounter:503  >= 5'h1a;
  assign fullcancellation = ghdl_rtil_signal_23_ ? 1'h1 : 1'h0;
  assign exppreround = expnewx_d2 - deltaexp;
  assign ghdl_rtil_signal_24_ = ~ stickybit;
  assign ghdl_rtil_signal_25_ = lsb_d1 & ghdl_rtil_signal_24_;
  assign ghdl_rtil_signal_26_ = stickybit | ghdl_rtil_signal_25_;
  assign ghdl_rtil_signal_27_ = ghdl_rtil_signal_26_ & roundbit_d1;
  assign roundupbit = ghdl_rtil_signal_27_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_28_ = ! expsigr[30:23];
  assign ghdl_rtil_signal_29_ = ghdl_rtil_signal_28_ & fullcancellation_d1;
  assign resultiszero = ghdl_rtil_signal_29_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_30_ = ~ resultisnan_d3;
  assign ghdl_rtil_signal_31_ = yisinfinity_d3 & xisinfinity_d3;
  assign ghdl_rtil_signal_32_ = ~ effsub_d3;
  assign ghdl_rtil_signal_33_ = ghdl_rtil_signal_32_ & ghdl_rtil_signal_31_;
  assign ghdl_rtil_signal_35_ = yisinfinity_d3 & ghdl_rtil_signal_34_;
  assign ghdl_rtil_signal_36_ = ghdl_rtil_signal_33_ | ghdl_rtil_signal_35_;
  assign ghdl_rtil_signal_38_ = ghdl_rtil_signal_37_ & xisinfinity_d3;
  assign ghdl_rtil_signal_39_ = ghdl_rtil_signal_36_ | ghdl_rtil_signal_38_;
  assign ghdl_rtil_signal_40_ = expsigr[30:23] == 8'hff;
  assign ghdl_rtil_signal_41_ = ghdl_rtil_signal_39_ | ghdl_rtil_signal_40_;
  assign ghdl_rtil_signal_42_ = ghdl_rtil_signal_41_ & ghdl_rtil_signal_30_;
  assign resultisinf = ghdl_rtil_signal_42_ ? 1'h1 : 1'h0;
  assign expsigr2 = resultisinf ? { constinf_d3[30:23], 23'h000000 } : ghdl_rtil_signal_43_;
  assign ghdl_rtil_signal_43_ = resultisnan_d3 ? constnan_d3 : expsigr;
  assign ghdl_rtil_signal_34_ = ~ xisinfinity_d3;
  assign ghdl_rtil_signal_44_ = ghdl_rtil_signal_34_ & resultiszero;
  assign ghdl_rtil_signal_37_ = ~ yisinfinity_d3;
  assign ghdl_rtil_signal_45_ = ghdl_rtil_signal_37_ & ghdl_rtil_signal_44_;
  assign ghdl_rtil_signal_46_ = resultisnan_d3 | ghdl_rtil_signal_45_;
  assign ghdl_rtil_signal_47_ = ~ xiszero_d3;
  assign ghdl_rtil_signal_48_ = ~ yiszero_d3;
  assign ghdl_rtil_signal_49_ = ghdl_rtil_signal_47_ | ghdl_rtil_signal_48_;
  assign ghdl_rtil_signal_50_ = signnewx_d3 != signnewy_d3;
  assign ghdl_rtil_signal_51_ = ghdl_rtil_signal_49_ | ghdl_rtil_signal_50_;
  assign ghdl_rtil_signal_52_ = ghdl_rtil_signal_51_ & ghdl_rtil_signal_46_;
  assign signr = ghdl_rtil_signal_52_ ? 1'h0 : signnewx_d3;
  always @(posedge clk, posedge rst)
    if (rst) expnewx_d1 <= 8'h00;
    else expnewx_d1 <= newx[30:23];
  always @(posedge clk, posedge rst)
    if (rst) expnewx_d2 <= 8'h00;
    else expnewx_d2 <= expnewx_d1;
  always @(posedge clk, posedge rst)
    if (rst) signnewx_d1 <= 1'h0;
    else signnewx_d1 <= newx[31];
  always @(posedge clk, posedge rst)
    if (rst) signnewx_d2 <= 1'h0;
    else signnewx_d2 <= signnewx_d1;
  always @(posedge clk, posedge rst)
    if (rst) signnewx_d3 <= 1'h0;
    else signnewx_d3 <= signnewx_d2;
  always @(posedge clk, posedge rst)
    if (rst) signnewy_d1 <= 1'h0;
    else signnewy_d1 <= newy[31];
  always @(posedge clk, posedge rst)
    if (rst) signnewy_d2 <= 1'h0;
    else signnewy_d2 <= signnewy_d1;
  always @(posedge clk, posedge rst)
    if (rst) signnewy_d3 <= 1'h0;
    else signnewy_d3 <= signnewy_d2;
  always @(posedge clk, posedge rst)
    if (rst) effsub_d1 <= 1'h0;
    else effsub_d1 <= effsub;
  always @(posedge clk, posedge rst)
    if (rst) effsub_d2 <= 1'h0;
    else effsub_d2 <= effsub_d1;
  always @(posedge clk, posedge rst)
    if (rst) effsub_d3 <= 1'h0;
    else effsub_d3 <= effsub_d2;
  always @(posedge clk, posedge rst)
    if (rst) xexpfieldzero_d1 <= 1'h0;
    else xexpfieldzero_d1 <= xexpfieldzero;
  always @(posedge clk, posedge rst)
    if (rst) xexpfieldzero_d2 <= 1'h0;
    else xexpfieldzero_d2 <= xexpfieldzero_d1;
  always @(posedge clk, posedge rst)
    if (rst) xisinfinity_d1 <= 1'h0;
    else xisinfinity_d1 <= xisinfinity;
  always @(posedge clk, posedge rst)
    if (rst) xisinfinity_d2 <= 1'h0;
    else xisinfinity_d2 <= xisinfinity_d1;
  always @(posedge clk, posedge rst)
    if (rst) xisinfinity_d3 <= 1'h0;
    else xisinfinity_d3 <= xisinfinity_d2;
  always @(posedge clk, posedge rst)
    if (rst) yisinfinity_d1 <= 1'h0;
    else yisinfinity_d1 <= yisinfinity;
  always @(posedge clk, posedge rst)
    if (rst) yisinfinity_d2 <= 1'h0;
    else yisinfinity_d2 <= yisinfinity_d1;
  always @(posedge clk, posedge rst)
    if (rst) yisinfinity_d3 <= 1'h0;
    else yisinfinity_d3 <= yisinfinity_d2;
  always @(posedge clk, posedge rst)
    if (rst) xiszero_d1 <= 1'h0;
    else xiszero_d1 <= xiszero;
  always @(posedge clk, posedge rst)
    if (rst) xiszero_d2 <= 1'h0;
    else xiszero_d2 <= xiszero_d1;
  always @(posedge clk, posedge rst)
    if (rst) xiszero_d3 <= 1'h0;
    else xiszero_d3 <= xiszero_d2;
  always @(posedge clk, posedge rst)
    if (rst) yiszero_d1 <= 1'h0;
    else yiszero_d1 <= yiszero;
  always @(posedge clk, posedge rst)
    if (rst) yiszero_d2 <= 1'h0;
    else yiszero_d2 <= yiszero_d1;
  always @(posedge clk, posedge rst)
    if (rst) yiszero_d3 <= 1'h0;
    else yiszero_d3 <= yiszero_d2;
  always @(posedge clk, posedge rst)
    if (rst) resultisnan_d1 <= 1'h0;
    else resultisnan_d1 <= resultisnan;
  always @(posedge clk, posedge rst)
    if (rst) resultisnan_d2 <= 1'h0;
    else resultisnan_d2 <= resultisnan_d1;
  always @(posedge clk, posedge rst)
    if (rst) resultisnan_d3 <= 1'h0;
    else resultisnan_d3 <= resultisnan_d2;
  always @(posedge clk, posedge rst)
    if (rst) stickylow_d1 <= 1'h0;
    else stickylow_d1 <= \rightshiftercomponent:471 ;
  always @(posedge clk, posedge rst)
    if (rst) stickylow_d2 <= 1'h0;
    else stickylow_d2 <= stickylow_d1;
  always @(posedge clk, posedge rst)
    if (rst) z1_d1 <= 1'h0;
    else z1_d1 <= \fracadder:497 [26];
  always @(posedge clk, posedge rst)
    if (rst) z0_d1 <= 1'h0;
    else z0_d1 <= \fracadder:497 [25];
  always @(posedge clk, posedge rst)
    if (rst) normalizedsignificand_d1 <= 53'h00000000000000;
    else normalizedsignificand_d1 <= \leftshiftercomponent:536 ;
  always @(posedge clk, posedge rst)
    if (rst) lsb_d1 <= 1'h0;
    else lsb_d1 <= \leftshiftercomponent:536 [3];
  always @(posedge clk, posedge rst)
    if (rst) roundbit_d1 <= 1'h0;
    else roundbit_d1 <= \leftshiftercomponent:536 [2];
  always @(posedge clk, posedge rst)
    if (rst) fullcancellation_d1 <= 1'h0;
    else fullcancellation_d1 <= fullcancellation;
  always @(posedge clk, posedge rst)
    if (rst) constnan_d1 <= 31'h00000000;
    else constnan_d1 <= 31'h7fffffff;
  always @(posedge clk, posedge rst)
    if (rst) constnan_d2 <= 31'h00000000;
    else constnan_d2 <= constnan_d1;
  always @(posedge clk, posedge rst)
    if (rst) constnan_d3 <= 31'h00000000;
    else constnan_d3 <= constnan_d2;
  intadder_27_freq150_uid6 fracadder (
    .cin(carryin),
    .clk(clk),
    .r(\fracadder:497 ),
    .rst(rst),
    .x({ 1'h0, significandnewx[23], newx[22:0], 2'h0 }),
    .y(summandy)
  );
  lzc_26_freq150_uid8 ieeefpadd_8_23_freq150_uid2leadingzerocounter (
    .clk(clk),
    .i(\fracadder:497 [26:1]),
    .o(\ieeefpadd_8_23_freq150_uid2leadingzerocounter:503 ),
    .rst(rst)
  );
  leftshifter27_by_max_26_freq150_uid10 leftshiftercomponent (
    .clk(clk),
    .r(\leftshiftercomponent:536 ),
    .rst(rst),
    .s(leftshiftval),
    .x(\fracadder:497 )
  );
  rightshiftersticky26_by_max_25_freq150_uid4 rightshiftercomponent (
    .clk(clk),
    .r(\rightshiftercomponent:470 ),
    .rst(rst),
    .s(finalrightshiftvalue),
    .sticky(\rightshiftercomponent:471 ),
    .x({ significandnewy[23], newy[22:0], 2'h0 })
  );
  intadder_31_freq150_uid13 roundingadder (
    .cin(roundupbit),
    .clk(clk),
    .r(expsigr),
    .rst(rst),
    .x({ exppreround, \leftshiftercomponent:536 [25:3] }),
    .y(31'h00000000)
  );
  assign constinf_d1[22:0] = 23'h000000;
  assign constinf_d2[22:0] = 23'h000000;
  assign constinf_d3[22:0] = 23'h000000;
  assign r = { signr, expsigr2 };
  assign significandnewx[22:0] = newx[22:0];
  assign significandnewy[22:0] = newy[22:0];
endmodule

module fpmult_3_pipe(clk, rst, x, y, r);
  input clk;
  wire clk;
  wire [33:0] \flopocofpmult:232 ;
  wire [33:0] \inputx:226 ;
  wire [33:0] \inputy:229 ;
  output [31:0] r;
  wire [31:0] r;
  input rst;
  wire rst;
  input [31:0] x;
  wire [31:0] x;
  input [31:0] y;
  wire [31:0] y;
  fpmult_3_pipex flopocofpmult (
    .clk(clk),
    .r(\flopocofpmult:232 ),
    .rst(rst),
    .x(\inputx:226 ),
    .y(\inputy:229 )
  );
  inputieee inputx (
    .r(\inputx:226 ),
    .x(x)
  );
  inputieee inputy (
    .r(\inputy:229 ),
    .x(y)
  );
  outputieee outputr (
    .r(r),
    .x(\flopocofpmult:232 )
  );
endmodule

module fpmult_3_pipex(clk, rst, x, y, r);
  wire ghdl_rtil_signal_00_;
  wire ghdl_rtil_signal_01_;
  wire ghdl_rtil_signal_02_;
  wire ghdl_rtil_signal_03_;
  wire ghdl_rtil_signal_04_;
  wire ghdl_rtil_signal_05_;
  wire ghdl_rtil_signal_06_;
  wire ghdl_rtil_signal_07_;
  wire ghdl_rtil_signal_08_;
  wire ghdl_rtil_signal_09_;
  wire ghdl_rtil_signal_10_;
  wire ghdl_rtil_signal_11_;
  wire ghdl_rtil_signal_12_;
  wire ghdl_rtil_signal_13_;
  wire ghdl_rtil_signal_14_;
  wire ghdl_rtil_signal_15_;
  wire ghdl_rtil_signal_16_;
  wire ghdl_rtil_signal_17_;
  wire ghdl_rtil_signal_18_;
  wire ghdl_rtil_signal_19_;
  wire ghdl_rtil_signal_20_;
  wire ghdl_rtil_signal_21_;
  wire ghdl_rtil_signal_22_;
  wire ghdl_rtil_signal_23_;
  wire ghdl_rtil_signal_24_;
  wire [9:0] bias_d1;
  input clk;
  wire clk;
  wire [1:0] exc;
  reg [1:0] exc_d1;
  reg [1:0] exc_d2;
  reg [1:0] exc_d3;
  wire [1:0] excpostnorm;
  wire [9:0] exppostnorm;
  wire [32:0] expsigpostround;
  wire [9:0] expsum;
  wire [9:0] expsumpresub;
  reg [9:0] expsumpresub_d1;
  wire [1:0] finalexc;
  wire guard;
  output [33:0] r;
  wire [33:0] r;
  wire round;
  input rst;
  wire rst;
  wire sign;
  reg sign_d1;
  reg sign_d2;
  reg sign_d3;
  wire [47:0] \significandmultiplication:776 ;
  wire [47:0] sigprodext;
  reg [47:0] sigprodext_d1;
  reg sticky_d1;
  input [33:0] x;
  wire [33:0] x;
  input [33:0] y;
  wire [33:0] y;
  reg [6:0] ghdl_rtil_signal_25_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_25_ <= 7'h00;
    else ghdl_rtil_signal_25_ <= 7'h7f;
  assign bias_d1[6:0] = ghdl_rtil_signal_25_;
  assign sign = x[31] ^ y[31];
  assign expsumpresub = { 2'h0, x[30:23] } + { 2'h0, y[30:23] };
  assign expsum = expsumpresub_d1 - { 3'h0, bias_d1[6:0] };
  assign ghdl_rtil_signal_00_ = ! { x[33:32], y[33:32] };
  assign ghdl_rtil_signal_01_ = { x[33:32], y[33:32] } == 4'h1;
  assign ghdl_rtil_signal_02_ = ghdl_rtil_signal_00_ | ghdl_rtil_signal_01_;
  assign ghdl_rtil_signal_03_ = { x[33:32], y[33:32] } == 4'h4;
  assign ghdl_rtil_signal_04_ = ghdl_rtil_signal_02_ | ghdl_rtil_signal_03_;
  assign ghdl_rtil_signal_05_ = { x[33:32], y[33:32] } == 4'h5;
  assign ghdl_rtil_signal_06_ = { x[33:32], y[33:32] } == 4'h6;
  assign ghdl_rtil_signal_07_ = { x[33:32], y[33:32] } == 4'h9;
  assign ghdl_rtil_signal_08_ = ghdl_rtil_signal_06_ | ghdl_rtil_signal_07_;
  assign ghdl_rtil_signal_09_ = { x[33:32], y[33:32] } == 4'ha;
  assign ghdl_rtil_signal_10_ = ghdl_rtil_signal_08_ | ghdl_rtil_signal_09_;
  function [1:0] \805 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        \805  = b[1:0];
      3'b?1?:
        \805  = b[3:2];
      3'b1??:
        \805  = b[5:4];
      default:
        \805  = a;
    endcase
  endfunction
  assign exc = \805 (2'h3, 6'h24, { ghdl_rtil_signal_10_, ghdl_rtil_signal_05_, ghdl_rtil_signal_04_ });
  assign exppostnorm = expsum + { 9'h000, \significandmultiplication:776 [47] };
  assign sigprodext = \significandmultiplication:776 [47] ? { \significandmultiplication:776 [46:0], 1'h0 } : { \significandmultiplication:776 [45:0], 2'h0 };
  assign ghdl_rtil_signal_11_ = ! sigprodext_d1[23:0];
  assign guard = ghdl_rtil_signal_11_ ? 1'h0 : 1'h1;
  assign ghdl_rtil_signal_12_ = ~ sigprodext_d1[25];
  assign ghdl_rtil_signal_13_ = guard & ghdl_rtil_signal_12_;
  assign ghdl_rtil_signal_14_ = ghdl_rtil_signal_13_ | sigprodext_d1[25];
  assign round = sticky_d1 & ghdl_rtil_signal_14_;
  assign ghdl_rtil_signal_15_ = ! expsigpostround[32:31];
  assign ghdl_rtil_signal_16_ = expsigpostround[32:31] == 2'h1;
  assign ghdl_rtil_signal_17_ = expsigpostround[32:31] == 2'h3;
  assign ghdl_rtil_signal_18_ = expsigpostround[32:31] == 2'h2;
  assign ghdl_rtil_signal_19_ = ghdl_rtil_signal_17_ | ghdl_rtil_signal_18_;
  function [1:0] \851 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        \851  = b[1:0];
      3'b?1?:
        \851  = b[3:2];
      3'b1??:
        \851  = b[5:4];
      default:
        \851  = a;
    endcase
  endfunction
  assign excpostnorm = \851 (2'h3, 6'h09, { ghdl_rtil_signal_19_, ghdl_rtil_signal_16_, ghdl_rtil_signal_15_ });
  assign ghdl_rtil_signal_20_ = exc_d3 == 2'h3;
  assign ghdl_rtil_signal_21_ = exc_d3 == 2'h2;
  assign ghdl_rtil_signal_22_ = ghdl_rtil_signal_20_ | ghdl_rtil_signal_21_;
  assign ghdl_rtil_signal_23_ = ! exc_d3;
  assign ghdl_rtil_signal_24_ = ghdl_rtil_signal_22_ | ghdl_rtil_signal_23_;
  assign finalexc = ghdl_rtil_signal_24_ ? exc_d3 : excpostnorm;
  always @(posedge clk, posedge rst)
    if (rst) sign_d1 <= 1'h0;
    else sign_d1 <= sign;
  always @(posedge clk, posedge rst)
    if (rst) sign_d2 <= 1'h0;
    else sign_d2 <= sign_d1;
  always @(posedge clk, posedge rst)
    if (rst) sign_d3 <= 1'h0;
    else sign_d3 <= sign_d2;
  always @(posedge clk, posedge rst)
    if (rst) expsumpresub_d1 <= 10'h000;
    else expsumpresub_d1 <= expsumpresub;
  always @(posedge clk, posedge rst)
    if (rst) exc_d1 <= 2'h0;
    else exc_d1 <= exc;
  always @(posedge clk, posedge rst)
    if (rst) exc_d2 <= 2'h0;
    else exc_d2 <= exc_d1;
  always @(posedge clk, posedge rst)
    if (rst) exc_d3 <= 2'h0;
    else exc_d3 <= exc_d2;
  always @(posedge clk, posedge rst)
    if (rst) sigprodext_d1 <= 48'h000000000000;
    else sigprodext_d1 <= sigprodext;
  always @(posedge clk, posedge rst)
    if (rst) sticky_d1 <= 1'h0;
    else sticky_d1 <= sigprodext[24];
  intadder_33_freq625_uid17 roundingadder (
    .cin(round),
    .clk(clk),
    .r(expsigpostround),
    .rst(rst),
    .x({ exppostnorm, sigprodext[47:25] }),
    .y(33'h000000000)
  );
  intmultiplier_freq625_uid5 significandmultiplication (
    .clk(clk),
    .r(\significandmultiplication:776 ),
    .rst(rst),
    .x({ 1'h1, x[22:0] }),
    .y({ 1'h1, y[22:0] })
  );
  assign bias_d1[9:7] = 3'h0;
  assign r = { finalexc, sign_d3, expsigpostround[30:0] };
endmodule

module inputieee(x, r);
  wire ghdl_rtil_signal_0_;
  wire ghdl_rtil_signal_1_;
  wire ghdl_rtil_signal_2_;
  wire ghdl_rtil_signal_3_;
  wire ghdl_rtil_signal_4_;
  wire ghdl_rtil_signal_5_;
  wire [1:0] ghdl_rtil_signal_6_;
  wire [1:0] ghdl_rtil_signal_7_;
  wire [1:0] exnr;
  wire expinfty;
  wire expzero;
  wire [22:0] fracr;
  wire fraczero;
  wire infinity;
  wire nan;
  output [33:0] r;
  wire [33:0] r;
  input [31:0] x;
  wire [31:0] x;
  wire zero;
  assign ghdl_rtil_signal_0_ = ! x[30:23];
  assign expzero = ghdl_rtil_signal_0_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_1_ = x[30:23] == 8'hff;
  assign expinfty = ghdl_rtil_signal_1_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_2_ = ! x[22:0];
  assign fraczero = ghdl_rtil_signal_2_ ? 1'h1 : 1'h0;
  assign ghdl_rtil_signal_3_ = x[22] & expzero;
  assign fracr = ghdl_rtil_signal_3_ ? { x[21:0], 1'h0 } : x[22:0];
  assign infinity = expinfty & fraczero;
  assign ghdl_rtil_signal_4_ = ~ x[22];
  assign zero = expzero & ghdl_rtil_signal_4_;
  assign ghdl_rtil_signal_5_ = ~ fraczero;
  assign nan = expinfty & ghdl_rtil_signal_5_;
  assign exnr = zero ? 2'h0 : ghdl_rtil_signal_6_;
  assign ghdl_rtil_signal_6_ = infinity ? 2'h2 : ghdl_rtil_signal_7_;
  assign ghdl_rtil_signal_7_ = nan ? 2'h3 : 2'h1;
  assign r = { exnr, x[31:23], fracr };
endmodule

module intadder_27_freq150_uid6(clk, rst, x, y, cin, r);
  wire [26:0] ghdl_rtil_signal_0_;
  input cin;
  wire cin;
  input clk;
  wire clk;
  output [26:0] r;
  wire [26:0] r;
  input rst;
  wire rst;
  input [26:0] x;
  wire [26:0] x;
  reg [26:0] x_d1;
  input [26:0] y;
  wire [26:0] y;
  reg [26:0] y_d1;
  assign ghdl_rtil_signal_0_ = x_d1 + y_d1;
  assign r = ghdl_rtil_signal_0_ + { 26'h0000000, cin };
  always @(posedge clk)
    x_d1 <= x;
  always @(posedge clk)
    y_d1 <= y;
endmodule

module intadder_31_freq150_uid13(clk, rst, x, y, cin, r);
  wire [30:0] ghdl_rtil_signal_0_;
  input cin;
  wire cin;
  input clk;
  wire clk;
  output [30:0] r;
  wire [30:0] r;
  input rst;
  wire rst;
  input [30:0] x;
  wire [30:0] x;
  reg [30:0] x_d1;
  input [30:0] y;
  wire [30:0] y;
  reg [30:0] y_d1;
  reg [30:0] y_d2;
  reg [30:0] y_d3;
  assign ghdl_rtil_signal_0_ = x_d1 + y_d3;
  assign r = ghdl_rtil_signal_0_ + { 30'h00000000, cin };
  always @(posedge clk)
    x_d1 <= x;
  always @(posedge clk)
    y_d1 <= y;
  always @(posedge clk)
    y_d2 <= y_d1;
  always @(posedge clk)
    y_d3 <= y_d2;
endmodule

module intadder_32_freq625_uid14(clk, rst, x, y, cin, r);
  wire [31:0] ghdl_rtil_signal_0_;
  wire [1:0] ghdl_rtil_signal_1_;
  input cin;
  wire cin;
  reg cin_0_d1;
  input clk;
  wire clk;
  output [31:0] r;
  wire [31:0] r;
  input rst;
  wire rst;
  wire [31:0] s_0;
  wire [1:0] s_1;
  input [31:0] x;
  wire [31:0] x;
  wire [31:0] x_0_d1;
  wire [1:0] x_1_d1;
  input [31:0] y;
  wire [31:0] y;
  wire [31:0] y_0_d1;
  wire [1:0] y_1_d1;
  reg [30:0] ghdl_rtil_signal_2_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_2_ <= 31'h00000000;
    else ghdl_rtil_signal_2_ <= x[30:0];
  assign x_0_d1[30:0] = ghdl_rtil_signal_2_;
  reg [30:0] ghdl_rtil_signal_3_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_3_ <= 31'h00000000;
    else ghdl_rtil_signal_3_ <= y[30:0];
  assign y_0_d1[30:0] = ghdl_rtil_signal_3_;
  reg \x_1_d1_reg[0] ;
  always @(posedge clk, posedge rst)
    if (rst) \x_1_d1_reg[0]  <= 1'h0;
    else \x_1_d1_reg[0]  <= x[31];
  assign x_1_d1[0] = \x_1_d1_reg[0] ;
  reg \y_1_d1_reg[0] ;
  always @(posedge clk, posedge rst)
    if (rst) \y_1_d1_reg[0]  <= 1'h0;
    else \y_1_d1_reg[0]  <= y[31];
  assign y_1_d1[0] = \y_1_d1_reg[0] ;
  assign ghdl_rtil_signal_0_ = { 1'h0, x_0_d1[30:0] } + { 1'h0, y_0_d1[30:0] };
  assign s_0 = ghdl_rtil_signal_0_ + { 31'h00000000, cin_0_d1 };
  assign ghdl_rtil_signal_1_ = { 1'h0, x_1_d1[0] } + { 1'h0, y_1_d1[0] };
  assign s_1 = ghdl_rtil_signal_1_ + { 1'h0, s_0[31] };
  always @(posedge clk, posedge rst)
    if (rst) cin_0_d1 <= 1'h0;
    else cin_0_d1 <= cin;
  assign r = { s_1[0], s_0[30:0] };
  assign x_0_d1[31] = 1'h0;
  assign x_1_d1[1] = 1'h0;
  assign y_0_d1[31] = 1'h0;
  assign y_1_d1[1] = 1'h0;
endmodule

module intadder_33_freq625_uid17(clk, rst, x, y, cin, r);
  wire [7:0] ghdl_rtil_signal_00_;
  wire [26:0] ghdl_rtil_signal_01_;
  input cin;
  wire cin;
  reg cin_0_d1;
  input clk;
  wire clk;
  output [32:0] r;
  wire [32:0] r;
  input rst;
  wire rst;
  wire [7:0] s_0;
  wire [26:0] s_1;
  input [32:0] x;
  wire [32:0] x;
  wire [7:0] x_0_d1;
  wire [7:0] x_0_d2;
  wire [26:0] x_1_d1;
  wire [26:0] x_1_d2;
  input [32:0] y;
  wire [32:0] y;
  wire [7:0] y_0_d1;
  wire [7:0] y_0_d2;
  wire [7:0] y_0_d3;
  wire [26:0] y_1_d1;
  wire [26:0] y_1_d2;
  wire [26:0] y_1_d3;
  reg [6:0] ghdl_rtil_signal_02_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_02_ <= 7'h00;
    else ghdl_rtil_signal_02_ <= x[6:0];
  assign x_0_d1[6:0] = ghdl_rtil_signal_02_;
  reg [6:0] ghdl_rtil_signal_03_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_03_ <= 7'h00;
    else ghdl_rtil_signal_03_ <= y[6:0];
  assign y_0_d1[6:0] = ghdl_rtil_signal_03_;
  reg [25:0] ghdl_rtil_signal_04_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_04_ <= 26'h0000000;
    else ghdl_rtil_signal_04_ <= x[32:7];
  assign x_1_d1[25:0] = ghdl_rtil_signal_04_;
  reg [25:0] ghdl_rtil_signal_05_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_05_ <= 26'h0000000;
    else ghdl_rtil_signal_05_ <= y[32:7];
  assign y_1_d1[25:0] = ghdl_rtil_signal_05_;
  reg [6:0] ghdl_rtil_signal_06_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_06_ <= 7'h00;
    else ghdl_rtil_signal_06_ <= x_0_d1[6:0];
  assign x_0_d2[6:0] = ghdl_rtil_signal_06_;
  reg [6:0] ghdl_rtil_signal_07_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_07_ <= 7'h00;
    else ghdl_rtil_signal_07_ <= y_0_d1[6:0];
  assign y_0_d2[6:0] = ghdl_rtil_signal_07_;
  reg [25:0] ghdl_rtil_signal_08_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_08_ <= 26'h0000000;
    else ghdl_rtil_signal_08_ <= x_1_d1[25:0];
  assign x_1_d2[25:0] = ghdl_rtil_signal_08_;
  reg [25:0] ghdl_rtil_signal_09_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_09_ <= 26'h0000000;
    else ghdl_rtil_signal_09_ <= y_1_d1[25:0];
  assign y_1_d2[25:0] = ghdl_rtil_signal_09_;
  reg [6:0] ghdl_rtil_signal_10_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_10_ <= 7'h00;
    else ghdl_rtil_signal_10_ <= y_0_d2[6:0];
  assign y_0_d3[6:0] = ghdl_rtil_signal_10_;
  reg [25:0] ghdl_rtil_signal_11_;
  always @(posedge clk, posedge rst)
    if (rst) ghdl_rtil_signal_11_ <= 26'h0000000;
    else ghdl_rtil_signal_11_ <= y_1_d2[25:0];
  assign y_1_d3[25:0] = ghdl_rtil_signal_11_;
  assign ghdl_rtil_signal_00_ = { 1'h0, x_0_d2[6:0] } + { 1'h0, y_0_d3[6:0] };
  assign s_0 = ghdl_rtil_signal_00_ + { 7'h00, cin_0_d1 };
  assign ghdl_rtil_signal_01_ = { 1'h0, x_1_d2[25:0] } + { 1'h0, y_1_d3[25:0] };
  assign s_1 = ghdl_rtil_signal_01_ + { 26'h0000000, s_0[7] };
  always @(posedge clk, posedge rst)
    if (rst) cin_0_d1 <= 1'h0;
    else cin_0_d1 <= cin;
  assign r = { s_1[25:0], s_0[6:0] };
  assign x_0_d1[7] = 1'h0;
  assign x_0_d2[7] = 1'h0;
  assign x_1_d1[26] = 1'h0;
  assign x_1_d2[26] = 1'h0;
  assign y_0_d1[7] = 1'h0;
  assign y_0_d2[7] = 1'h0;
  assign y_0_d3[7] = 1'h0;
  assign y_1_d1[26] = 1'h0;
  assign y_1_d2[26] = 1'h0;
  assign y_1_d3[26] = 1'h0;
endmodule

module intmultiplier_freq625_uid5(clk, rst, x, y, r);
  wire [31:0] \bitheapfinaladd_bh7:1318 ;
  input clk;
  wire clk;
  output [47:0] r;
  wire [47:0] r;
  input rst;
  wire rst;
  wire [40:0] tile_0_filtered_output;
  wire [30:0] tile_1_filtered_output;
  reg [16:0] tmp_bitheapresult_bh7_16_d1;
  input [23:0] x;
  wire [23:0] x;
  input [23:0] y;
  wire [23:0] y;
  always @(posedge clk, posedge rst)
    if (rst) tmp_bitheapresult_bh7_16_d1 <= 17'h00000;
    else tmp_bitheapresult_bh7_16_d1 <= tile_0_filtered_output[16:0];
  intadder_32_freq625_uid14 bitheapfinaladd_bh7 (
    .cin(1'h0),
    .clk(clk),
    .r(\bitheapfinaladd_bh7:1318 ),
    .rst(rst),
    .x({ 1'h0, tile_1_filtered_output[30:24], tile_0_filtered_output[40:17] }),
    .y({ 8'h00, tile_1_filtered_output[23:0] })
  );
  dspblock_17x24_freq625_uid9 tile_0_mult (
    .clk(clk),
    .r(tile_0_filtered_output),
    .rst(rst),
    .x(x[16:0]),
    .y(y)
  );
  dspblock_7x24_freq625_uid11 tile_1_mult (
    .clk(clk),
    .r(tile_1_filtered_output),
    .rst(rst),
    .x(x[23:17]),
    .y(y)
  );
  assign r = { \bitheapfinaladd_bh7:1318 [30:0], tmp_bitheapresult_bh7_16_d1 };
endmodule

module leftshifter27_by_max_26_freq150_uid10(clk, rst, x, s, r);
  input clk;
  wire clk;
  reg [26:0] level0_d1;
  wire [27:0] level1;
  wire [29:0] level2;
  wire [33:0] level3;
  wire [41:0] level4;
  wire [57:0] level5;
  output [52:0] r;
  wire [52:0] r;
  input rst;
  wire rst;
  input [4:0] s;
  wire [4:0] s;
  input [26:0] x;
  wire [26:0] x;
  assign level1 = s[0] ? { level0_d1, 1'h0 } : { 1'h0, level0_d1 };
  assign level2 = s[1] ? { level1, 2'h0 } : { 2'h0, level1 };
  assign level3 = s[2] ? { level2, 4'h0 } : { 4'h0, level2 };
  assign level4 = s[3] ? { level3, 8'h00 } : { 8'h00, level3 };
  assign level5 = s[4] ? { level4, 16'h0000 } : { 16'h0000, level4 };
  always @(posedge clk, posedge rst)
    if (rst) level0_d1 <= 27'h0000000;
    else level0_d1 <= x;
  assign r = level5[52:0];
endmodule

module lzc_26_freq150_uid8(clk, rst, i, o);
  wire ghdl_rtil_signal_0_;
  wire ghdl_rtil_signal_1_;
  wire ghdl_rtil_signal_2_;
  wire ghdl_rtil_signal_3_;
  wire ghdl_rtil_signal_4_;
  wire ghdl_rtil_signal_5_;
  wire ghdl_rtil_signal_6_;
  wire ghdl_rtil_signal_7_;
  input clk;
  wire clk;
  wire digit2;
  wire digit3;
  wire digit4;
  reg digit4_d1;
  input [25:0] i;
  wire [25:0] i;
  wire [2:0] level2;
  wire [6:0] level3;
  wire [14:0] level4;
  reg [14:0] level4_d1;
  wire [1:0] lowbits;
  output [4:0] o;
  wire [4:0] o;
  input rst;
  wire rst;
  assign ghdl_rtil_signal_7_ = | { ghdl_rtil_signal_6_, ghdl_rtil_signal_5_ };
  assign ghdl_rtil_signal_0_ = ! i[25:10];
  assign digit4 = ghdl_rtil_signal_0_ ? 1'h1 : 1'h0;
  assign level4 = digit4 ? { i[9:0], 5'h1f } : i[25:11];
  assign ghdl_rtil_signal_1_ = ! level4_d1[14:7];
  assign digit3 = ghdl_rtil_signal_1_ ? 1'h1 : 1'h0;
  assign level3 = digit3 ? level4_d1[6:0] : level4_d1[14:8];
  assign ghdl_rtil_signal_2_ = ! level3[6:3];
  assign digit2 = ghdl_rtil_signal_2_ ? 1'h1 : 1'h0;
  assign level2 = digit2 ? level3[2:0] : level3[6:4];
  assign ghdl_rtil_signal_3_ = ! level2;
  assign ghdl_rtil_signal_4_ = level2 == 3'h1;
  assign ghdl_rtil_signal_5_ = level2 == 3'h2;
  assign ghdl_rtil_signal_6_ = level2 == 3'h3;
  function [1:0] \1093 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        \1093  = b[1:0];
      3'b?1?:
        \1093  = b[3:2];
      3'b1??:
        \1093  = b[5:4];
      default:
        \1093  = a;
    endcase
  endfunction
  assign lowbits = \1093 (2'h0, 6'h1b, { ghdl_rtil_signal_7_, ghdl_rtil_signal_4_, ghdl_rtil_signal_3_ });
  always @(posedge clk, posedge rst)
    if (rst) digit4_d1 <= 1'h0;
    else digit4_d1 <= digit4;
  always @(posedge clk, posedge rst)
    if (rst) level4_d1 <= 15'h0000;
    else level4_d1 <= level4;
  assign o = { digit4_d1, digit3, digit2, lowbits };
endmodule

module outputieee(x, r);
  wire ghdl_rtil_signal_0_;
  wire ghdl_rtil_signal_1_;
  wire ghdl_rtil_signal_2_;
  wire ghdl_rtil_signal_3_;
  wire ghdl_rtil_signal_4_;
  wire ghdl_rtil_signal_5_;
  wire ghdl_rtil_signal_6_;
  wire [22:0] ghdl_rtil_signal_7_;
  wire [22:0] ghdl_rtil_signal_8_;
  wire [7:0] ghdl_rtil_signal_9_;
  wire [7:0] expr;
  wire expzero;
  wire [22:0] fracr;
  output [31:0] r;
  wire [31:0] r;
  wire sx;
  input [33:0] x;
  wire [33:0] x;
  assign ghdl_rtil_signal_1_ = x[33:32] == 2'h2;
  assign ghdl_rtil_signal_2_ = ghdl_rtil_signal_0_ | ghdl_rtil_signal_1_;
  assign ghdl_rtil_signal_4_ = ghdl_rtil_signal_2_ | ghdl_rtil_signal_3_;
  assign sx = ghdl_rtil_signal_4_ ? x[31] : 1'h0;
  assign ghdl_rtil_signal_5_ = ! x[30:23];
  assign expzero = ghdl_rtil_signal_5_ ? 1'h1 : 1'h0;
  assign fracr = ghdl_rtil_signal_3_ ? 23'h000000 : ghdl_rtil_signal_7_;
  assign ghdl_rtil_signal_6_ = ghdl_rtil_signal_0_ & expzero;
  assign ghdl_rtil_signal_7_ = ghdl_rtil_signal_6_ ? { 1'h1, x[22:1] } : ghdl_rtil_signal_8_;
  assign ghdl_rtil_signal_8_ = ghdl_rtil_signal_0_ ? x[22:0] : { 22'h000000, x[32] };
  assign ghdl_rtil_signal_3_ = ! x[33:32];
  assign expr = ghdl_rtil_signal_3_ ? 8'h00 : ghdl_rtil_signal_9_;
  assign ghdl_rtil_signal_0_ = x[33:32] == 2'h1;
  assign ghdl_rtil_signal_9_ = ghdl_rtil_signal_0_ ? x[30:23] : 8'hff;
  assign r = { sx, expr, fracr };
endmodule

module rightshiftersticky26_by_max_25_freq150_uid4(clk, rst, x, s, r, sticky);
  wire ghdl_rtil_signal_00_;
  wire ghdl_rtil_signal_01_;
  wire ghdl_rtil_signal_02_;
  wire ghdl_rtil_signal_03_;
  wire ghdl_rtil_signal_04_;
  wire ghdl_rtil_signal_05_;
  wire ghdl_rtil_signal_06_;
  wire ghdl_rtil_signal_07_;
  wire ghdl_rtil_signal_08_;
  wire ghdl_rtil_signal_09_;
  wire ghdl_rtil_signal_10_;
  wire ghdl_rtil_signal_11_;
  wire ghdl_rtil_signal_12_;
  input clk;
  wire clk;
  wire [25:0] level1;
  reg [25:0] level1_d1;
  wire [25:0] level2;
  reg [25:0] level2_d1;
  wire [25:0] level3;
  reg [25:0] level3_d1;
  wire [25:0] level4;
  reg [25:0] level4_d1;
  reg [4:0] ps_d1;
  output [25:0] r;
  wire [25:0] r;
  input rst;
  wire rst;
  input [4:0] s;
  wire [4:0] s;
  output sticky;
  wire sticky;
  wire stk1;
  wire stk2;
  wire stk3;
  wire stk4;
  reg stk4_d1;
  input [25:0] x;
  wire [25:0] x;
  assign level1 = s[1] ? { 2'h0, level2[25:2] } : level2;
  assign ghdl_rtil_signal_11_ = ps_d1[0] & level1_d1[0];
  assign ghdl_rtil_signal_12_ = ghdl_rtil_signal_11_ | stk1;
  assign sticky = ghdl_rtil_signal_12_ ? 1'h1 : 1'h0;
  assign r = s[0] ? { 1'h0, level1[25:1] } : level1;
  always @(posedge clk, posedge rst)
    if (rst) ps_d1 <= 5'h00;
    else ps_d1 <= s;
  always @(posedge clk, posedge rst)
    if (rst) stk4_d1 <= 1'h0;
    else stk4_d1 <= stk4;
  always @(posedge clk, posedge rst)
    if (rst) level4_d1 <= 26'h0000000;
    else level4_d1 <= level4;
  always @(posedge clk, posedge rst)
    if (rst) level3_d1 <= 26'h0000000;
    else level3_d1 <= level3;
  always @(posedge clk, posedge rst)
    if (rst) level2_d1 <= 26'h0000000;
    else level2_d1 <= level2;
  always @(posedge clk, posedge rst)
    if (rst) level1_d1 <= 26'h0000000;
    else level1_d1 <= level1;
  assign ghdl_rtil_signal_00_ = | x[15:0];
  assign ghdl_rtil_signal_01_ = s[4] & ghdl_rtil_signal_00_;
  assign stk4 = ghdl_rtil_signal_01_ ? 1'h1 : 1'h0;
  assign level4 = s[4] ? { 16'h0000, x[25:16] } : x;
  assign ghdl_rtil_signal_02_ = | level4_d1[7:0];
  assign ghdl_rtil_signal_03_ = ps_d1[3] & ghdl_rtil_signal_02_;
  assign ghdl_rtil_signal_04_ = ghdl_rtil_signal_03_ | stk4_d1;
  assign stk3 = ghdl_rtil_signal_04_ ? 1'h1 : 1'h0;
  assign level3 = s[3] ? { 8'h00, level4[25:8] } : level4;
  assign ghdl_rtil_signal_05_ = | level3_d1[3:0];
  assign ghdl_rtil_signal_06_ = ps_d1[2] & ghdl_rtil_signal_05_;
  assign ghdl_rtil_signal_07_ = ghdl_rtil_signal_06_ | stk3;
  assign stk2 = ghdl_rtil_signal_07_ ? 1'h1 : 1'h0;
  assign level2 = s[2] ? { 4'h0, level3[25:4] } : level3;
  assign ghdl_rtil_signal_08_ = | level2_d1[1:0];
  assign ghdl_rtil_signal_09_ = ps_d1[1] & ghdl_rtil_signal_08_;
  assign ghdl_rtil_signal_10_ = ghdl_rtil_signal_09_ | stk2;
  assign stk1 = ghdl_rtil_signal_10_ ? 1'h1 : 1'h0;
endmodule

module sub_tensor_core(clk, rst, A_0X, A_1X, A_2X, A_3X, B_0X, B_1X, B_2X, B_3X, C_0X, C_1X, C_2X, C_3X, W_0X3, W_1X3, W_2X3, W_3X3);
  input [127:0] A_0X;
  wire [127:0] A_0X;
  input [127:0] A_1X;
  wire [127:0] A_1X;
  input [127:0] A_2X;
  wire [127:0] A_2X;
  input [127:0] A_3X;
  wire [127:0] A_3X;
  input [127:0] B_0X;
  wire [127:0] B_0X;
  input [127:0] B_1X;
  wire [127:0] B_1X;
  input [127:0] B_2X;
  wire [127:0] B_2X;
  input [127:0] B_3X;
  wire [127:0] B_3X;
  input [127:0] C_0X;
  wire [127:0] C_0X;
  input [127:0] C_1X;
  wire [127:0] C_1X;
  input [127:0] C_2X;
  wire [127:0] C_2X;
  input [127:0] C_3X;
  wire [127:0] C_3X;
  output [127:0] W_0X3;
  wire [127:0] W_0X3;
  output [127:0] W_1X3;
  wire [127:0] W_1X3;
  output [127:0] W_2X3;
  wire [127:0] W_2X3;
  output [127:0] W_3X3;
  wire [127:0] W_3X3;
  input clk;
  wire clk;
  wire [31:0] \d_unit0:13 ;
  wire [31:0] \d_unit10:133 ;
  wire [31:0] \d_unit11:145 ;
  wire [31:0] \d_unit12:157 ;
  wire [31:0] \d_unit13:169 ;
  wire [31:0] \d_unit14:181 ;
  wire [31:0] \d_unit15:193 ;
  wire [31:0] \d_unit1:25 ;
  wire [31:0] \d_unit2:37 ;
  wire [31:0] \d_unit3:49 ;
  wire [31:0] \d_unit4:61 ;
  wire [31:0] \d_unit5:73 ;
  wire [31:0] \d_unit6:85 ;
  wire [31:0] \d_unit7:97 ;
  wire [31:0] \d_unit8:109 ;
  wire [31:0] \d_unit9:121 ;
  input rst;
  wire rst;
  dot_unit_core d_unit0 (
    .a_x0(A_0X[31:0]),
    .a_x1(A_0X[63:32]),
    .a_x2(A_0X[95:64]),
    .a_x3(A_0X[127:96]),
    .b_x0(B_0X[31:0]),
    .b_x1(B_1X[31:0]),
    .b_x2(B_2X[31:0]),
    .b_x3(B_3X[31:0]),
    .c_x0(C_0X[31:0]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit0:13 )
  );
  dot_unit_core d_unit1 (
    .a_x0(A_0X[31:0]),
    .a_x1(A_0X[63:32]),
    .a_x2(A_0X[95:64]),
    .a_x3(A_0X[127:96]),
    .b_x0(B_0X[63:32]),
    .b_x1(B_1X[63:32]),
    .b_x2(B_2X[63:32]),
    .b_x3(B_3X[63:32]),
    .c_x0(C_1X[31:0]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit1:25 )
  );
  dot_unit_core d_unit10 (
    .a_x0(A_2X[31:0]),
    .a_x1(A_2X[63:32]),
    .a_x2(A_2X[95:64]),
    .a_x3(A_2X[127:96]),
    .b_x0(B_0X[95:64]),
    .b_x1(B_1X[95:64]),
    .b_x2(B_2X[95:64]),
    .b_x3(B_3X[95:64]),
    .c_x0(C_2X[95:64]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit10:133 )
  );
  dot_unit_core d_unit11 (
    .a_x0(A_2X[31:0]),
    .a_x1(A_2X[63:32]),
    .a_x2(A_2X[95:64]),
    .a_x3(A_2X[127:96]),
    .b_x0(B_0X[127:96]),
    .b_x1(B_1X[127:96]),
    .b_x2(B_2X[127:96]),
    .b_x3(B_3X[127:96]),
    .c_x0(C_3X[95:64]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit11:145 )
  );
  dot_unit_core d_unit12 (
    .a_x0(A_3X[31:0]),
    .a_x1(A_3X[63:32]),
    .a_x2(A_3X[95:64]),
    .a_x3(A_3X[127:96]),
    .b_x0(B_0X[31:0]),
    .b_x1(B_1X[31:0]),
    .b_x2(B_2X[31:0]),
    .b_x3(B_3X[31:0]),
    .c_x0(C_0X[127:96]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit12:157 )
  );
  dot_unit_core d_unit13 (
    .a_x0(A_3X[31:0]),
    .a_x1(A_3X[63:32]),
    .a_x2(A_3X[95:64]),
    .a_x3(A_3X[127:96]),
    .b_x0(B_0X[63:32]),
    .b_x1(B_1X[63:32]),
    .b_x2(B_2X[63:32]),
    .b_x3(B_3X[63:32]),
    .c_x0(C_1X[127:96]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit13:169 )
  );
  dot_unit_core d_unit14 (
    .a_x0(A_3X[31:0]),
    .a_x1(A_3X[63:32]),
    .a_x2(A_3X[95:64]),
    .a_x3(A_3X[127:96]),
    .b_x0(B_0X[95:64]),
    .b_x1(B_1X[95:64]),
    .b_x2(B_2X[95:64]),
    .b_x3(B_3X[95:64]),
    .c_x0(C_2X[127:96]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit14:181 )
  );
  dot_unit_core d_unit15 (
    .a_x0(A_3X[31:0]),
    .a_x1(A_3X[63:32]),
    .a_x2(A_3X[95:64]),
    .a_x3(A_3X[127:96]),
    .b_x0(B_0X[127:96]),
    .b_x1(B_1X[127:96]),
    .b_x2(B_2X[127:96]),
    .b_x3(B_3X[127:96]),
    .c_x0(C_3X[127:96]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit15:193 )
  );
  dot_unit_core d_unit2 (
    .a_x0(A_0X[31:0]),
    .a_x1(A_0X[63:32]),
    .a_x2(A_0X[95:64]),
    .a_x3(A_0X[127:96]),
    .b_x0(B_0X[95:64]),
    .b_x1(B_1X[95:64]),
    .b_x2(B_2X[95:64]),
    .b_x3(B_3X[95:64]),
    .c_x0(C_2X[31:0]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit2:37 )
  );
  dot_unit_core d_unit3 (
    .a_x0(A_0X[31:0]),
    .a_x1(A_0X[63:32]),
    .a_x2(A_0X[95:64]),
    .a_x3(A_0X[127:96]),
    .b_x0(B_0X[127:96]),
    .b_x1(B_1X[127:96]),
    .b_x2(B_2X[127:96]),
    .b_x3(B_3X[127:96]),
    .c_x0(C_3X[31:0]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit3:49 )
  );
  dot_unit_core d_unit4 (
    .a_x0(A_1X[31:0]),
    .a_x1(A_1X[63:32]),
    .a_x2(A_1X[95:64]),
    .a_x3(A_1X[127:96]),
    .b_x0(B_0X[31:0]),
    .b_x1(B_1X[31:0]),
    .b_x2(B_2X[31:0]),
    .b_x3(B_3X[31:0]),
    .c_x0(C_0X[63:32]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit4:61 )
  );
  dot_unit_core d_unit5 (
    .a_x0(A_1X[31:0]),
    .a_x1(A_1X[63:32]),
    .a_x2(A_1X[95:64]),
    .a_x3(A_1X[127:96]),
    .b_x0(B_0X[63:32]),
    .b_x1(B_1X[63:32]),
    .b_x2(B_2X[63:32]),
    .b_x3(B_3X[63:32]),
    .c_x0(C_1X[63:32]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit5:73 )
  );
  dot_unit_core d_unit6 (
    .a_x0(A_1X[31:0]),
    .a_x1(A_1X[63:32]),
    .a_x2(A_1X[95:64]),
    .a_x3(A_1X[127:96]),
    .b_x0(B_0X[95:64]),
    .b_x1(B_1X[95:64]),
    .b_x2(B_2X[95:64]),
    .b_x3(B_3X[95:64]),
    .c_x0(C_2X[63:32]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit6:85 )
  );
  dot_unit_core d_unit7 (
    .a_x0(A_1X[31:0]),
    .a_x1(A_1X[63:32]),
    .a_x2(A_1X[95:64]),
    .a_x3(A_1X[127:96]),
    .b_x0(B_0X[127:96]),
    .b_x1(B_1X[127:96]),
    .b_x2(B_2X[127:96]),
    .b_x3(B_3X[127:96]),
    .c_x0(C_3X[63:32]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit7:97 )
  );
  dot_unit_core d_unit8 (
    .a_x0(A_2X[31:0]),
    .a_x1(A_2X[63:32]),
    .a_x2(A_2X[95:64]),
    .a_x3(A_2X[127:96]),
    .b_x0(B_0X[31:0]),
    .b_x1(B_1X[31:0]),
    .b_x2(B_2X[31:0]),
    .b_x3(B_3X[31:0]),
    .c_x0(C_0X[95:64]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit8:109 )
  );
  dot_unit_core d_unit9 (
    .a_x0(A_2X[31:0]),
    .a_x1(A_2X[63:32]),
    .a_x2(A_2X[95:64]),
    .a_x3(A_2X[127:96]),
    .b_x0(B_0X[63:32]),
    .b_x1(B_1X[63:32]),
    .b_x2(B_2X[63:32]),
    .b_x3(B_3X[63:32]),
    .c_x0(C_1X[95:64]),
    .clk(clk),
    .rst(rst),
    .w_xx3(\d_unit9:121 )
  );
  assign W_0X3 = { \d_unit3:49 , \d_unit2:37 , \d_unit1:25 , \d_unit0:13  };
  assign W_1X3 = { \d_unit7:97 , \d_unit6:85 , \d_unit5:73 , \d_unit4:61  };
  assign W_2X3 = { \d_unit11:145 , \d_unit10:133 , \d_unit9:121 , \d_unit8:109  };
  assign W_3X3 = { \d_unit15:193 , \d_unit14:181 , \d_unit13:169 , \d_unit12:157  };
endmodule
